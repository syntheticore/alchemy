sed -e 's/^X//' <<\*EOF > gwb/Copyright
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
*EOF
if [ `wc -c <gwb/Copyright` -ne     640 ]
then
    echo "lengths do not match -- Bad Copy of gwb/Copyright"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
echo "extracting file gwb/Makefile"
sed -e 's/^X//' <<\*EOF > gwb/Makefile
Xlibs:
X       cd euler; make
X       cd split; make
X       cd setop; make
X
Xc.o:;
X       cc -c -g -DTEST $*.c
*EOF
if [ `wc -c <gwb/Makefile` -ne      83 ]
then
    echo "lengths do not match -- Bad Copy of gwb/Makefile"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
echo "extracting file gwb/Update"
sed -e 's/^X//' <<\*EOF > gwb/Update
Xset list = ($argv[2-])
X@ n = 0
Xforeach f ($argv[2-])
Xecho cc -c -g $f
Xcc -c -g $f
X@ n++
Xset list[$n] = ${f:r}.o
Xend
Xar r $1 $list[1-]
Xecho ar r $1 $list[1-]
Xranlib $1
Xecho ranlib $1
Xrm $list[1-]
Xecho rm $list[1-]
*EOF
if [ `wc -c <gwb/Update` -ne     213 ]
then
    echo "lengths do not match -- Bad Copy of gwb/Update"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
echo "extracting file gwb/funcs.h"
sed -e 's/^X//' <<\*EOF > gwb/funcs.h
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include    <math.h>
X
X# define    void        int
X/*# define    fabs(x)        (((x) < 0.0) ? (-x) : (x))*/
X
Xvoid        addlist();
XHalfEdge        *addhe();
XSolid        *ball();
X/*Solid        *block();*/    /* clash with mem.h */
XSolid        *circle();
XSolid        *cyl();
XHalfEdge        *delhe();
XFace        *fface();
XHalfEdge        *fhe1();
XHalfEdge        *fhe2();
XFace            *lmef();
XFace            *lmfkrh();
Xvoid            lmev();
Xint         mev();
XSolid       *mvfs();
XNode        *new();
XSolid        *torus();
X
Xdouble        dot();
Xdouble        normalize();
Xdouble        dot2();
Xdouble        edist();
Xdouble        dist();
*EOF
if [ `wc -c <gwb/funcs.h` -ne    1292 ]
then
    echo "lengths do not match -- Bad Copy of gwb/funcs.h"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
echo "extracting file gwb/gwb.h"
sed -e 's/^X//' <<\*EOF > gwb/gwb.h
X# include <stdio.h>
X# include <math.h>
X# define VAX 1
X
Xtypedef float                   vector[4];
Xtypedef float                   matrix[4][4];
X#ifdef VAX
Xtypedef short                   Id;
X#endif
X#ifdef MAC
Xtypedef int                     Id;
X#endif
Xtypedef struct solid            Solid;
Xtypedef struct face             Face;
Xtypedef struct loop             Loop;
Xtypedef struct halfedge         HalfEdge;
Xtypedef struct vertex           Vertex;
Xtypedef struct edge             Edge;
Xtypedef union nodes             Node;
X
Xstruct solid
X{
X        Face            *sfaces;        /* pointer to list of faces */
X        Edge            *sedges;        /* pointer to list of edges */
X        Vertex          *sverts;        /* pointer to list of vertices */
X};
Xstruct face
X{
X        Id              faceno;         /* face identifier */
X        Solid           *fsolid;        /* back pointer to solid */
X        Loop            *flout;         /* pointer to outer loop */
X        Loop            *floops;        /* pointer to list of loops */
X        vector          feq;            /* face equation */
X        Face            *nextf;         /* pointer to next face */
X        Face            *prevf;         /* pointer to previous face */
X};
Xstruct loop
X{
X        HalfEdge        *ledg;          /* pointer to ring of halfedges */
X        Face            *lface;         /* back pointer to face */
X        Loop            *nextl;         /* pointer to next loop */
X        Loop            *prevl;         /* pointer to previous loop */
X};
Xstruct edge
X{
X        HalfEdge        *he1;           /* pointer to right halfedge */
X        HalfEdge        *he2;           /* pointer to left halfedge */
X        Edge            *nexte;         /* pointer to next edge */
X        Edge            *preve;         /* pointer to previous edge */
X};
Xstruct halfedge
X{
X        Edge            *edg;           /* pointer to parent edge */
X        Vertex          *vtx;           /* pointer to starting vertex */
X        Loop            *wloop;         /* back pointer to loop */
X        HalfEdge        *nxt;           /* pointer to next halfedge */
X        HalfEdge        *prv;           /* pointer to previous halfedge */
X};
Xstruct vertex
X{
X        Id              vertexno;       /* vertex identifier */
X        HalfEdge        *vedge;         /* pointer to an adjacent halfedge */
X        vector          vcoord;         /* vertex coordinates */
X        Vertex          *nextv;         /* pointer to next vertex */
X        Vertex          *prevv;         /* pointer to previous vertex */
X};
Xunion nodes
X{
X        Solid           s;
X        Face            f;
X        Loop            l;
X        HalfEdge        h;
X        Vertex          v;
X        Edge            e;
X};
X
X# include "params.h"
*EOF
if [ `wc -c <gwb/gwb.h` -ne    2784 ]
then
    echo "lengths do not match -- Bad Copy of gwb/gwb.h"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/lib ]
then
echo "Making directory ./gwb/lib"
mkdir ./gwb/lib
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
echo "extracting file gwb/params.h"
sed -e 's/^X//' <<\*EOF > gwb/params.h
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X/* return codes and misc constants */
X# define        ERROR           -1
X# define        SUCCESS         -2
X# define        NIL             0
X# define        PI              3.141592653589793
X
X/* parameters for memory allocation routines */
X# define        SOLID           0
X# define        FACE            1
X# define        LOOP            2
X# define        HALFEDGE        3
X# define        EDGE            4
X# define        VERTEX          5
X
X/* coordinate plane names */
X# define        X               0
X# define        Y               1
X# define        Z               2
X
X/* orientations */
X# define        PLUS            0
X# define        MINUS           1
X
X/* macros */
X# define        mate(he)        (((he) == (he)->edg->he1) ? \
X                                (he)->edg->he2 : (he)->edg->he1)
X# define        max(x,y)        (((x) > (y)) ? (x) : (y))
X# define        abs(x)          (((x) > 0.0) ? (x) : -(x))
X
X/* global variables */
Xextern Id       maxf;           /* largest face no. given so far */
Xextern Id       maxv;           /* largest vertex no. given so far */
X
X/* epsilons for geometric tests */
Xextern double   EPS;
Xextern double   BIGEPS;
X
X# include "funcs.h"
*EOF
if [ `wc -c <gwb/params.h` -ne    1827 ]
then
    echo "lengths do not match -- Bad Copy of gwb/params.h"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/Makefile"
sed -e 's/^X//' <<\*EOF > gwb/euler/Makefile
XLIB =  ../lib/gwblib.a
X
XSRC =  addhe.c addlist.c arc.c bndrlv.c circle.c contlv.c contvv.c del.c \
X       delhe.c dellist.c faceeq.c init.c int2ee.c intrve.c kef.c kev.c \
X       larea.c listsolid.c lkef.c lkemr.c lkev.c lkfmrh.c \
X       lmef.c lmekr.c lmev.c lmfkrh.c loopglue.c mef.c mev.c mvfs.c new.c \
X       revert.c rsweep2.c scan.c scannames.c solidls.c svolume.c torus.c\
X       laringmv.c contfv.c merge.c checkv.c vector.c
X
X$(LIB):                $(SRC)
X       csh -f Update $(LIB) $?
X
Xtest5:         test5.c $(LIB)
X       cc -o test5 test5.c -g $(LIB) -lm
X
Xtest3:         test3.c $(LIB)
X       cc -o test3 test3.c -g $(LIB) -lm
X
Xtest2:         test2.c $(LIB)
X       cc -o test2 test2.c -g $(LIB)
X
Xtest1:         test1.c $(LIB)
X       cc -o test1 test1.c -g $(LIB)
X
Xc.o:;
X       cc -c -g -DTEST $*.c
*EOF
if [ `wc -c <gwb/euler/Makefile` -ne     702 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/Makefile"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/Update"
sed -e 's/^X//' <<\*EOF > gwb/euler/Update
Xset list = ($argv[2-])
X@ n = 0
Xforeach f ($argv[2-])
Xecho cc -c -g $f
Xcc -c -g $f
X@ n++
Xset list[$n] = ${f:r}.o
Xend
Xar r $1 $list[1-]
Xecho ar r $1 $list[1-]
Xranlib $1
Xecho ranlib $1
Xrm $list[1-]
Xecho rm $list[1-]
*EOF
if [ `wc -c <gwb/euler/Update` -ne     213 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/Update"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/addhe.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/addhe.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
XHalfEdge        *addhe(e, v, where, sign)
XEdge            *e;
XVertex          *v;
XHalfEdge        *where;
Xint             sign;
X{
X        HalfEdge        *he;
X
X        if(where->edg == NIL)
X        {
X                he = where;
X        }
X        else
X        {
X                he = (HalfEdge *) new(HALFEDGE, NIL);
X                where->prv->nxt = he;
X                he->prv = where->prv;
X                where->prv = he;
X                he->nxt = where;
X        }
X
X        he->edg = e;
X        he->vtx = v;
X        he->wloop = where->wloop;
X    if(sign == PLUS)
X            e->he1 = he;
X    else    e->he2 = he;
X
X    return(he);
X}
*EOF
if [ `wc -c <gwb/euler/addhe.c` -ne    1293 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/addhe.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/addlist.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/addlist.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid    addlist(what, which, where)
Xint     what;
XNode    *which, *where;
X{
X        switch(what)
X        {
X                case FACE:
X                        which->f.nextf = where->s.sfaces;
X                        which->f.prevf = (Face *) NIL;
X                        if(where->s.sfaces)
X                                where->s.sfaces->prevf = (Face *) which;
X                        where->s.sfaces = (Face *) which;
X                        which->f.fsolid = (Solid *) where;
X                        break;
X                case LOOP:
X                        which->l.nextl = where->f.floops;
X                        which->l.prevl = (Loop *) NIL;
X                        if(where->f.floops)
X                                where->f.floops->prevl = (Loop *) which;
X                        where->f.floops = (Loop *) which;
X                        which->l.lface = (Face *) where;
X                        break;
X                case EDGE:
X                        which->e.nexte = where->s.sedges;
X                        which->e.preve = (Edge *) NIL;
X                        if(where->s.sedges)
X                                where->s.sedges->preve = (Edge *) which;
X                        where->s.sedges = (Edge *) which;
X                        break;
X                case VERTEX:
X                        which->v.nextv = where->s.sverts;
X                        which->v.prevv = (Vertex *) NIL;
X                        if(where->s.sverts)
X                                where->s.sverts->prevv = (Vertex *) which;
X                        where->s.sverts = (Vertex *) which;
X                        break;
X        }
X}
*EOF
if [ `wc -c <gwb/euler/addlist.c` -ne    2286 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/addlist.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/arc.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/arc.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid    arc(s, f, v, cx, cy, rad, h, phi1, phi2, n)
XSolid   *s;
XId      f, v;
Xfloat   cx, cy, rad, h, phi1, phi2;
Xint     n;
X{
X        float   x, y, angle, inc;
X        Id      prev;
X        int     i;
X
X        angle = phi1 * PI / 180.0;
X        inc = (phi2 - phi1) * PI / (180.0 * n);
X        prev = v;
X        getmaxnames(s);
X        for(i = 0; i < n; i++)
X        {
X                angle += inc;
X                x = cx + cos(angle) * rad;
X                y = cy + sin(angle) * rad;
X                mev(s, f, prev, ++maxv, x, y, h);
X                prev = maxv;
X        }
X}
X
Xvoid    getmaxnames(s)
XSolid   *s;
X{
X        Vertex  *v;
X        Face    *f;
X
X        for(v = s->sverts, maxv = 0; v != NIL; v = v->nextv)
X                if(v->vertexno > maxv) maxv = v->vertexno;
X        for(f = s->sfaces, maxf = 0; f != NIL; f = f->nextf)
X                if(f->faceno > maxf) maxf = f->faceno;
X}
*EOF
if [ `wc -c <gwb/euler/arc.c` -ne    1552 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/arc.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/bndrlv.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/bndrlv.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
XHalfEdge        *hithe;
XVertex          *hitvertex;
X
Xint     bndrlv(l, v)
XLoop    *l;
XVertex  *v;
X{
X        HalfEdge        *he;
X
X     he = l->ledg;
X    do
X    {
X        if(contvv(he->vtx, v))
X        {
X            hitvertex = he->vtx;
X            hithe = NIL;
X            return(3);
X        }
X    }
X    while((he = he->nxt) != l->ledg);
X    he = l->ledg;
X    do
X    {
X        if(contev(he->vtx, he->nxt->vtx, v))
X        {
X            hitvertex = NIL;
X            hithe = he;
X            return(2);
X        }
X    }
X    while((he = he->nxt) != l->ledg);
X        return(0);
X}
*EOF
if [ `wc -c <gwb/euler/bndrlv.c` -ne    1234 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/bndrlv.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/checkv.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/checkv.c
X#
X# define NDEBUG
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X#include "gwb.h"
X/*    assert.h    4.1    83/05/03    */
X
X# ifndef NDEBUG
X# define _assert(ex) {if (!(ex)){fprintf(stderr,"Assertion failed: file %s, line
X %d\n", __FILE__, __LINE__);abort();}}
X# define assert(ex) {if (!(ex)){fprintf(stderr,"Assertion failed: file %s, line
X %d\n", __FILE__, __LINE__);abort();}}
X# else
X# define _assert(ex) ;
X# define assert(ex) ;
X# endif
X
Xvoid    checkv(s)
XSolid    *s;
X{
X    Vertex        *v;
X    HalfEdge    *he;
X    int        maxtry;
X
X    v = s->sverts;
X    while(v)
X    {
X        he = v->vedge;
X        maxtry = 50;
X        if(he)
X        do
X        {
X            assert(he->edg != NIL);
X            assert(he->vtx == v);
X            assert(maxtry-- > 0);
X        }
X        while((he = mate(he)->nxt) != v->vedge);
X        v = v->nextv;
X    }
X}
*EOF
if [ `wc -c <gwb/euler/checkv.c` -ne    1441 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/checkv.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/circle.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/circle.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X#include "gwb.h"
X
XSolid   *circle(cx, cy, rad, h, n)
Xfloat   cx, cy, rad, h;
Xint     n;
X{
X        Solid        *s;
X
X        s = mvfs(1, 1, cx+rad, cy, h);
X        arc(s, 1, 1, cx, cy, rad, h, 0.0, ((n-1)*360.0/n), n-1);
X        mef(s, n, 1, 1, 2);
X        return(s);
X}
*EOF
if [ `wc -c <gwb/euler/circle.c` -ne     909 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/circle.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/contfv.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/contfv.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xint    contfv(f, v)
XFace    *f;
XVertex    *v;
X{
X    int    drop;
X
X    faceeq(f->flout, f->feq);
X    drop = dropcoord(f->feq);
X    return(contfv2(f, v, drop));
X}
X
Xint    contfv2(f, v, drop)
XFace    *f;
XVertex    *v;
Xint    drop;
X{
X    Loop    *l;
X    int    cont;
X
X    cont = contlv(f->flout, v, drop);
X
X    if(cont == 0)
X        return(0);
X    if(cont > 1)
X        return(cont);
X
X    l = f->floops;
X    while(l)
X    {
X        if((l != f->flout) && l->ledg->nxt->nxt != l->ledg)
X        {
X            cont = contlv(l, v, drop);
X            if(cont == 1) return(0);
X            if(cont > 1) return(cont);
X        }
X        l = l->nextl;
X    }
X    return(1);
X}
*EOF
if [ `wc -c <gwb/euler/contfv.c` -ne    1317 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/contfv.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/contlv.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/contlv.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xint    contlv(l, v, drop)
XLoop    *l;
XVertex    *v;
Xint    drop;
X{
X    HalfEdge    *he1, *he2;
X    Vertex         aux;
X    double        t1, t2;
X    int        intersections, intr, c1, c2;
X
X#ifdef TEST
Xprintf("contlv: vertex %d vs. face %d\n", v->vertexno, l->lface->faceno);
X#endif
X    if((intr = bndrlv(l, v)) > 0)
X               return(intr);
X
X    he2 = l->ledg;
Xlabel:
X    aux.vcoord[0] = (he2->vtx->vcoord[0] + he2->nxt->vtx->vcoord[0]) / 2.0;
X    aux.vcoord[1] = (he2->vtx->vcoord[1] + he2->nxt->vtx->vcoord[1]) / 2.0;
X    aux.vcoord[2] = (he2->vtx->vcoord[2] + he2->nxt->vtx->vcoord[2]) / 2.0;
X    he1 = l->ledg;
X    intersections = 0;
X    do
X    {
X        intr = int2ee(v, &aux, he1->vtx, he1->nxt->vtx,
X                              drop, &t1, &t2);
X        if(intr == 1)
X        {
X            c1 = comp(t2, 0.0, EPS);
X            c2 = comp(t2, 1.0, EPS);
X            if(c1 == 0 || c2 == 0)
X            {
X                he2 = he2->nxt;
X                if(he2 == l->ledg) return(ERROR);
X                goto label;
X            }
X            if(c1 == 1 && c2 == -1)
X                if(t1 >= 0.0) intersections++;
X        }
X    }
X    while((he1 = he1->nxt) != l->ledg);
X#ifdef TEST
Xprintf("contlv: intersections = %d\n", intersections);
X#endif
X    intersections = intersections % 2;
X    return(intersections);
X}
*EOF
if [ `wc -c <gwb/euler/contlv.c` -ne    1978 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/contlv.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/contvv.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/contvv.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xint    contvv(v1, v2)
XVertex    *v1, *v2;
X{
X    double    v[3];
X    double    diff;
X
X    v[0] = v1->vcoord[0] - v2->vcoord[0];
X    v[1] = v1->vcoord[1] - v2->vcoord[1];
X    v[2] = v1->vcoord[2] - v2->vcoord[2];
X
X    diff = v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
X    return(diff < EPS);
X}
*EOF
if [ `wc -c <gwb/euler/contvv.c` -ne     949 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/contvv.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/del.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/del.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include    "gwb.h"
X
Xextern unsigned    nodesize[];
X
Xvoid    del(what, which, where)
Xint     what;
XNode    *which;
XNode    *where;
X{
X    switch(what)
X    {
X        case SOLID:
X            break;
X        case FACE:
X            dellist(FACE, which, where);
X            break;
X        case LOOP:
X            dellist(LOOP, which, where);
X            break;
X        case EDGE:
X            dellist(EDGE, which, where);
X            break;
X        case HALFEDGE:
X            break;
X        case VERTEX:
X            dellist(VERTEX, which, where);
X            break;
X    }
X    free(which);
X}
X
X/* how many bytes does s use ? */
Xint    bytesused(s)
XSolid    *s;
X{
X    Face        *f;
X    Loop        *l;
X    HalfEdge    *he;
X    int        used;
X
X    used = nodesize[SOLID];
X
X    f = s->sfaces;
X    while(f)
X    {
X        used += nodesize[FACE];
X        l = f->floops;
X        while(l)
X        {
X            used += nodesize[LOOP];
X            he = l->ledg;
X            do
X            {
X                used += nodesize[HALFEDGE];
X                if(he->edg)
X                    if(he == he->edg->he1)
X                        used += nodesize[EDGE];
X                if(he == he->vtx->vedge)
X                    used += nodesize[VERTEX];
X            }
X            while((he = he->nxt) != l->ledg);
X            l = l->nextl;
X        }
X        f = f->nextf;
X    }
X    return(used);
X}
*EOF
if [ `wc -c <gwb/euler/del.c` -ne    2010 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/del.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/delhe.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/delhe.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
XHalfEdge        *delhe(he)
XHalfEdge        *he;
X{
X        if(he->edg == NIL)
X        {
X                del(HALFEDGE, he, NIL);
X                return(NIL);
X        }
X        else if(he->nxt == he)
X        {
X                he->edg = NIL;
X                return(he);
X        }
X        else
X        {
X                he->prv->nxt = he->nxt;
X                he->nxt->prv = he->prv;
X                del(HALFEDGE, he, NIL);
X                return(he->prv);
X        }
X}
*EOF
if [ `wc -c <gwb/euler/delhe.c` -ne    1123 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/delhe.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/dellist.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/dellist.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include    "gwb.h"
X
Xvoid    dellist(what, which, where)
Xint    what;
XNode    *which, *where;
X{
X    switch(what)
X    {
X        case FACE:
X            if(which->f.prevf)
X                which->f.prevf->nextf = which->f.nextf;
X            if(which->f.nextf)
X                which->f.nextf->prevf = which->f.prevf;
X            if((Face *) which == where->s.sfaces)
X                where->s.sfaces = which->f.nextf;
X            break;
X        case LOOP:
X            if(which->l.prevl)
X                which->l.prevl->nextl = which->l.nextl;
X            if(which->l.nextl)
X                which->l.nextl->prevl = which->l.prevl;
X            if((Loop *) which == where->f.floops)
X                where->f.floops = which->l.nextl;
X            break;
X        case EDGE:
X            if(which->e.preve)
X                which->e.preve->nexte = which->e.nexte;
X            if(which->e.nexte)
X                which->e.nexte->preve = which->e.preve;
X            if((Edge *) which == where->s.sedges)
X                where->s.sedges = which->e.nexte;
X            break;
X        case VERTEX:
X            if(which->v.prevv)
X                which->v.prevv->nextv = which->v.nextv;
X            if(which->v.nextv)
X                which->v.nextv->prevv = which->v.prevv;
X            if((Vertex *) which == where->s.sverts)
X                where->s.sverts = which->v.nextv;
X            break;
X    }
X}
*EOF
if [ `wc -c <gwb/euler/dellist.c` -ne    2020 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/dellist.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/faceeq.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/faceeq.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xint     faceeq(l, eq)
XLoop    *l;
Xvector  eq;
X{
X        HalfEdge        *he;
X        double          a, b, c, norm;
X        double          xi, yi, zi, xj, yj, zj, xc, yc, zc;
X        int             length;
X
X        a = b = c = xc = yc = zc = 0.0;
X        length = 0;
X        he = l->ledg;
X        do
X        {
X                xi = he->vtx->vcoord[0];
X                yi = he->vtx->vcoord[1];
X                zi = he->vtx->vcoord[2];
X                xj = he->nxt->vtx->vcoord[0];
X                yj = he->nxt->vtx->vcoord[1];
X                zj = he->nxt->vtx->vcoord[2];
X                a += (yi - yj) * (zi + zj);
X                b += (zi - zj) * (xi + xj);
X                c += (xi - xj) * (yi + yj);
X                xc += xi;
X                yc += yi;
X                zc += zi;
X                length++;
X        }
X        while((he = he->nxt) != l->ledg);
X
X        if((norm = sqrt(a*a + b*b + c*c)) != 0.0)
X        {
X                eq[0] = a / norm;
X                eq[1] = b / norm;
X                eq[2] = c / norm;
X                eq[3] = (eq[0]*xc + eq[1]*yc + eq[2]*zc) / (-length);
X        return(SUCCESS);
X        }
X        else
X        {
X                printf("faceeq: null face %d\n", l->lface->faceno);
X                return(ERROR);
X        }
X}
*EOF
if [ `wc -c <gwb/euler/faceeq.c` -ne    1922 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/faceeq.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/funcs.h"
sed -e 's/^X//' <<\*EOF > gwb/euler/funcs.h
X# include    <math.h>
X
X# define    void        int
X/*# define    fabs(x)        (((x) < 0.0) ? (-x) : (x))*/
X
Xvoid        addlist();
XHalfEdge        *addhe();
XSolid        *ball();
XSolid        *block();    /* MAC: clash with mem.h */
XSolid        *circle();
XSolid        *cyl();
XHalfEdge        *delhe();
XFace        *fface();
XHalfEdge        *fhe1();
XHalfEdge        *fhe2();
XFace            *lmef();
XFace            *lmfkrh();
Xvoid            lmev();
Xint         mev();
XSolid       *mvfs();
XNode        *new();
XSolid        *torus();
X
Xdouble        dot();
Xdouble        normalize();
Xdouble        dist();
*EOF
if [ `wc -c <gwb/euler/funcs.h` -ne     608 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/funcs.h"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/gwb.h"
sed -e 's/^X//' <<\*EOF > gwb/euler/gwb.h
X# include <stdio.h>
X# define VAX 1
X
Xtypedef float                   vector[4];
Xtypedef float                   matrix[4][4];
X#ifdef VAX
Xtypedef short                   Id;
X#endif
X#ifdef MAC
Xtypedef int                     Id;
X#endif
Xtypedef struct solid            Solid;
Xtypedef struct face             Face;
Xtypedef struct loop             Loop;
Xtypedef struct halfedge         HalfEdge;
Xtypedef struct vertex           Vertex;
Xtypedef struct edge             Edge;
Xtypedef union nodes             Node;
X
Xstruct solid
X{
X        Face            *sfaces;        /* pointer to list of faces */
X        Edge            *sedges;        /* pointer to list of edges */
X        Vertex          *sverts;        /* pointer to list of vertices */
X};
Xstruct face
X{
X        Id              faceno;         /* face identifier */
X        Solid           *fsolid;        /* back pointer to solid */
X        Loop            *flout;         /* pointer to outer loop */
X        Loop            *floops;        /* pointer to list of loops */
X        vector          feq;            /* face equation */
X        Face            *nextf;         /* pointer to next face */
X        Face            *prevf;         /* pointer to previous face */
X};
Xstruct loop
X{
X        HalfEdge        *ledg;          /* pointer to ring of halfedges */
X        Face            *lface;         /* back pointer to face */
X        Loop            *nextl;         /* pointer to next loop */
X        Loop            *prevl;         /* pointer to previous loop */
X};
Xstruct edge
X{
X        HalfEdge        *he1;           /* pointer to right halfedge */
X        HalfEdge        *he2;           /* pointer to left halfedge */
X        Edge            *nexte;         /* pointer to next edge */
X        Edge            *preve;         /* pointer to previous edge */
X};
Xstruct halfedge
X{
X        Edge            *edg;           /* pointer to parent edge */
X        Vertex          *vtx;           /* pointer to starting vertex */
X        Loop            *wloop;         /* back pointer to loop */
X        HalfEdge        *nxt;           /* pointer to next halfedge */
X        HalfEdge        *prv;           /* pointer to previous halfedge */
X};
Xstruct vertex
X{
X        Id              vertexno;       /* vertex identifier */
X        HalfEdge        *vedge;         /* pointer to an adjacent halfedge */
X        vector          vcoord;         /* vertex coordinates */
X        Vertex          *nextv;         /* pointer to next vertex */
X        Vertex          *prevv;         /* pointer to previous vertex */
X};
Xunion nodes
X{
X        Solid           s;
X        Face            f;
X        Loop            l;
X        HalfEdge        h;
X        Vertex          v;
X        Edge            e;
X};
X
X# include "params.h"
*EOF
if [ `wc -c <gwb/euler/gwb.h` -ne    2765 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/gwb.h"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/init.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/init.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X#define VAX 1
X
X#ifdef VAX
Xshort           maxv = 0;
Xshort           maxf = 0;
X#endif
X#ifdef MAC
Xint             maxv = 0;
Xint             maxf = 0;
X#endif
X
Xdouble       EPS = 1e-6;
Xdouble       BIGEPS = 1e-4;
*EOF
if [ `wc -c <gwb/euler/init.c` -ne     849 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/init.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/int2ee.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/int2ee.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xint     int2ee(v1, v2, v3, v4, drop, t1, t2)
XVertex  *v1, *v2, *v3, *v4;
Xint     drop;
Xdouble  *t1, *t2;
X{
X        double  D1, D2, D, a1, a2, b1, b2, c1, c2;
X
X        switch(drop)
X        {
X                case X:
X                        a1 = v2->vcoord[1] - v1->vcoord[1];
X                        a2 = v2->vcoord[2] - v1->vcoord[2];
X                        b1 = v3->vcoord[1] - v4->vcoord[1];
X                        b2 = v3->vcoord[2] - v4->vcoord[2];
X                        break;
X                case Y:
X                        a1 = v2->vcoord[0] - v1->vcoord[0];
X                        a2 = v2->vcoord[2] - v1->vcoord[2];
X                        b1 = v3->vcoord[0] - v4->vcoord[0];
X                        b2 = v3->vcoord[2] - v4->vcoord[2];
X                        break;
X                case Z:
X                        a1 = v2->vcoord[0] - v1->vcoord[0];
X                        a2 = v2->vcoord[1] - v1->vcoord[1];
X                        b1 = v3->vcoord[0] - v4->vcoord[0];
X                        b2 = v3->vcoord[1] - v4->vcoord[1];
X                        break;
X        }
X
X        D = a1*b2 - a2*b1;
X        if(comp(D, 0.0, EPS) == 0)
X                return(0);
X        else
X        {
X                switch(drop)
X                {
X                        case X:
X                                c1 = v1->vcoord[1] - v3->vcoord[1];
X                                c2 = v1->vcoord[2] - v3->vcoord[2];
X                                break;
X                        case Y:
X                                c1 = v1->vcoord[0] - v3->vcoord[0];
X                                c2 = v1->vcoord[2] - v3->vcoord[2];
X                                break;
X                        case Z:
X                                c1 = v1->vcoord[0] - v3->vcoord[0];
X                                c2 = v1->vcoord[1] - v3->vcoord[1];
X                                break;
X                }
X                D1 = c2*b1 - c1*b2;
X                D2 = a2*c1 - a1*c2;
X                *t1 = D1/D;
X                *t2 = D2/D;
X                return(1);
X        }
X}
*EOF
if [ `wc -c <gwb/euler/int2ee.c` -ne    2710 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/int2ee.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/intrve.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/intrve.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xint     intrve(v1, v2, v3, t)
XVertex  *v1, *v2, *v3;
Xdouble  *t;
X{
X        Vertex  testv;
X        float   r1[3], r2[3], r1r1, tprime;
X
X        r1[0] = v2->vcoord[0] - v1->vcoord[0];
X        r1[1] = v2->vcoord[1] - v1->vcoord[1];
X        r1[2] = v2->vcoord[2] - v1->vcoord[2];
X
X        r1r1 = dot(r1, r1);
X        if(r1r1 < EPS*EPS)
X        {
X                *t = 0.0;
X                return(contvv(v1, v3));
X        }
X        else
X        {
X                r2[0] = v3->vcoord[0] - v1->vcoord[0];
X                r2[1] = v3->vcoord[1] - v1->vcoord[1];
X                r2[2] = v3->vcoord[2] - v1->vcoord[2];
X                tprime = dot(r1, r2) / r1r1;
X                testv.vcoord[0] = v1->vcoord[0] + tprime * r1[0];
X                testv.vcoord[1] = v1->vcoord[1] + tprime * r1[1];
X                testv.vcoord[2] = v1->vcoord[2] + tprime * r1[2];
X                *t = tprime;
X                return(contvv(&testv, v3));
X        }
X}
X
Xint     contev(v1, v2, v3)
XVertex  *v1, *v2, *v3;
X{
X        double  t;
X
X        if(intrve(v1, v2, v3, &t))
X                if(t >= (-EPS) && t <= (1.0+EPS))
X                        return(1);
X        return(0);
X}
*EOF
if [ `wc -c <gwb/euler/intrve.c` -ne    1807 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/intrve.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/kef.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/kef.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include    "gwb.h"
X
Xint     kef(s, v1, v2, fno)
XSolid   *s;
XId      v1, v2, fno;
X{
X    Face        *f;
X    HalfEdge    *he;
X
X    /* find the objects, check that they exist */
X    if(!(f = fface(s, fno)))
X    {
X        fprintf(stderr, "kef: face %d not found\n", fno);
X        return(ERROR);
X    }
X
X    if(!(he = fhe2(f, v1, v2)))
X        if(!(he = fhe2(f, v2, v1)))
X        {
X            fprintf(stderr, "kef: edge %d-%d not found\n", v1, v2);
X            return(ERROR);
X        }
X
X
X    /* call lkef() to do the real job */
X    lkef(he, mate(he));
X
X    return(SUCCESS);
X}
*EOF
if [ `wc -c <gwb/euler/kef.c` -ne    1214 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/kef.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/kev.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/kev.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include    "gwb.h"
X
Xint     kev(s, fnr, v1, v2)
XSolid   *s;
XId      fnr, v1, v2;
X{
X    Face            *f;
X    register HalfEdge    *he1, *he2;
X
X    /* find needed objects, check existence */
X    if(!(f = fface(s, fnr)))
X    {
X        fprintf(stderr, "kev: face %d not found\n", fnr);
X        return(ERROR);
X    }
X    if(!(he1 = fhe2(f, v1, v2)))
X    {
X        fprintf(stderr, "kev: edge %d-%d not found\n", v1, v2);
X        return(ERROR);
X    }
X
X    he2 = mate(he1);
X
X    /* check that edge occurs in only one loop */
X    if(he1->wloop != he2->wloop)
X    {
X        fprintf(stderr, "kev: edge %d-%d not in same loop\n", v1, v2);
X        return(ERROR);
X    }
X
X    /* check that v2 is an endpoint */
X    if(he1->nxt != he2)
X    {
X        fprintf(stderr, "kev: vertex %d is not an endpoint\n", v2);
X        return(ERROR);
X    }
X
X    /* call lkev() to do the real work */
X    lkev(he2, he1);
X
X    return(SUCCESS);
X}
*EOF
if [ `wc -c <gwb/euler/kev.c` -ne    1554 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/kev.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/larea.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/larea.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xdouble    loopar(l)
XLoop    *l;
X{
X    HalfEdge    *he;
X    Vertex      *v1, *v2, *v3;
X    vector        aa, bb, cc, dd, normal;
X
X    dd[0] = dd[1] = dd[2] = 0.0;
X    faceeq(l, normal);
X    he = l->ledg;
X    v1 = he->vtx;
X    he = he->nxt;
X    do
X    {
X        v2 = he->vtx;
X        v3 = he->nxt->vtx;
X        aa[0] = v2->vcoord[0] - v1->vcoord[0];
X        aa[1] = v2->vcoord[1] - v1->vcoord[1];
X        aa[2] = v2->vcoord[2] - v1->vcoord[2];
X        bb[0] = v3->vcoord[0] - v1->vcoord[0];
X        bb[1] = v3->vcoord[1] - v1->vcoord[1];
X        bb[2] = v3->vcoord[2] - v1->vcoord[2];
X        cross(cc, aa, bb);
X        dd[0] += cc[0];
X        dd[1] += cc[1];
X        dd[2] += cc[2];
X    }
X    while((he = he->nxt) != l->ledg);
X    return(0.5 * dot(normal, dd));
X}
*EOF
if [ `wc -c <gwb/euler/larea.c` -ne    1422 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/larea.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/laringmv.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/laringmv.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid    aringmv(), lringmv(), laringmv();
X
Xvoid    ringmv(s, v1, v2, f1, f2, out)
XSolid    *s;
Xint    v1, v2, f1, f2;
Xint    out;
X{
X    Face        *ff1, *ff2;
X    HalfEdge    *dum;
X
X    ff1 = fface(s, f1);
X    ff2 = fface(s, f2);
X    if(v2) dum = fhe2(ff1, v1, v2);
X    else   dum = fhe1(ff1, v1);
X    if(!dum)
X    {
X        fprintf(stderr, "ringmv: no edge <%d,%d> found in face %d\n",
X            v1, v2, f1);
X        abort();
X    }
X    lringmv(ff1, ff2, dum->wloop, out);
X}
X
Xvoid    lringmv(f1, f2, l, out)
XFace    *f1, *f2;
XLoop    *l;
Xint    out;
X{
X    dellist(LOOP, l, f1);
X    addlist(LOOP, l, f2);
X    if(out) f2->flout = l;
X}
X
Xvoid    aringmv(s, f1, f2)
XSolid    *s;
Xint    f1, f2;
X{
X    laringmv(fface(s, f1), fface(s, f2));
X}
X
Xvoid    laringmv(f1, f2)
XFace    *f1, *f2;
X{
X    vector        tmp;
X    int        drop, in;
X    Loop        *ring;
X    Loop        *l;
X
X    faceeq(f1->flout, f1->feq);
X    drop = dropcoord(f1->feq);
X    l = f1->floops;
X    while(l)
X    {
X        if((ring = l) != f1->flout)
X        {
X            l = l->nextl;
X            in = contfv2(f1, ring->ledg->vtx, drop);
X            if(!in)
X            {
X                dellist(LOOP, ring, f1);
X                addlist(LOOP, ring, f2);
X            }
X        }
X        else l = l->nextl;
X    }
X}
*EOF
if [ `wc -c <gwb/euler/laringmv.c` -ne    1937 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/laringmv.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/listnbrs.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/listnbrs.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid    listneighbors(v)
XVertex  *v;
X{
X        HalfEdge        *adj;
X
X        adj = v->vedge;
X        if(adj)
X                do
X                {
X                        printf("%d ", adj->nxt->vtx->vertexno);
X                }
X                while((adj = mate(adj)->nxt) != v->vedge);
X        else    printf("no adjacent vertices");
X        printf("\n");
X}
*EOF
if [ `wc -c <gwb/euler/listnbrs.c` -ne    1019 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/listnbrs.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/listsolid.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/listsolid.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X#include "gwb.h"
X
Xvoid    listsolid(s)
XSolid   *s;
X{
X     Face         *f;
X     Loop         *l;
X     HalfEdge     *he;
X
X     f = s->sfaces;
X     while(f)
X     {
X          printf("face %d:\n", f->faceno);
X          l = f->floops;
X          while(l)
X          {
X               printf("loop:");
X               he = l->ledg;
X               do
X               {
X                    printf(" %d: (%f %f %f)",
X                           he->vtx->vertexno, he->vtx->vcoord[0],
X                           he->vtx->vcoord[1], he->vtx->vcoord[2]);
X               }
X               while((he = he->nxt) != l->ledg);
X               printf("\n");
X               l = l->nextl;
X          }
X          f = f->nextf;
X     }
X}
*EOF
if [ `wc -c <gwb/euler/listsolid.c` -ne    1346 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/listsolid.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/lkef.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/lkef.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include    "gwb.h"
X
Xvoid            lkef(h1, h2)
XHalfEdge        *h1, *h2;
X{
X    Face            *f1, *f2;
X    Loop            *l, *l1, *l2;
X    register HalfEdge    *he;
X
XSolid *s;
Xs = h1->wloop->lface->fsolid;
X    l1 = h1->wloop;
X    f1 = l1->lface;
X    l2 = h2->wloop;
X    f2 = l2->lface;
X
X    while(l = f2->floops)
X    {
X        dellist(LOOP, (Node *)l, (Node *)f2);
X        addlist(LOOP, (Node *)l, (Node *)f1);
X    }
X
X    he = l2->ledg;
X    do
X    {
X        he->wloop = l1;
X    }
X    while((he = he->nxt) != l2->ledg);
X
X    h1->prv->nxt = h2;
X    h2->prv->nxt = h1;
X    he = h2->prv;
X    h2->prv = h1->prv;
X    h1->prv = he;
X
X    delhe(h2);
X    delhe(h1);
X
X    h2->vtx->vedge = h1->nxt;
X    if(!h2->vtx->vedge->edg) h2->vtx->vedge = (HalfEdge *)NIL;
X    h1->vtx->vedge = h2->nxt;
X    if(!h1->vtx->vedge->edg) h1->vtx->vedge = (HalfEdge *)NIL;
X
X    l1->ledg = h1->nxt;
X
X    del(FACE, (Node *)f2, (Node *)f1->fsolid);
X    del(LOOP, (Node *)l2, (Node *)f1);
X    del(EDGE, (Node *)h2->edg, (Node *)f1->fsolid);
X#ifdef TEST
Xcheckv(s);
X#endif
X}
*EOF
if [ `wc -c <gwb/euler/lkef.c` -ne    1687 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/lkef.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/lkemr.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/lkemr.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include    "gwb.h"
X
Xvoid            lkemr(h1, h2)
XHalfEdge        *h1, *h2;
X{
X    register HalfEdge    *h3, *h4;
X    Loop            *nl;
X    Loop            *ol;
X    Edge            *killedge;
X
X#ifdef TEST
XSolid *s;
Xs = h1->wloop->lface->fsolid;
X#endif
X    ol = h1->wloop;
X    nl = (Loop *) new(LOOP, (Node *)ol->lface);
X    killedge = h1->edg;
X
X    h3 = h1->nxt;
X    h1->nxt = h2->nxt;
X    h2->nxt->prv = h1;
X    h2->nxt = h3;
X    h3->prv = h2;
X
X    h4 = h2;
X    do
X    {
X        h4->wloop = nl;
X    }
X    while((h4 = h4->nxt) != h2);
X
X    ol->ledg = h3 = delhe(h1);
X    nl->ledg = h4 = delhe(h2);
X
X    h3->vtx->vedge = (h3->edg) ? h3 : (HalfEdge *)NIL;
X    h4->vtx->vedge = (h4->edg) ? h4 : (HalfEdge *)NIL;
X    h3->nxt->vtx->vedge = (h3->nxt->edg) ? h3->nxt : (HalfEdge *)NIL;
X    h4->nxt->vtx->vedge = (h4->nxt->edg) ? h4->nxt : (HalfEdge *)NIL;
X
X    del(EDGE, (Node *)killedge, ol->lface->fsolid);
X#ifdef TEST
Xcheckv(s);
X#endif
X}
*EOF
if [ `wc -c <gwb/euler/lkemr.c` -ne    1578 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/lkemr.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/lkev.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/lkev.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid            lkev(he1, he2)
XHalfEdge        *he1, *he2;
X{
X    HalfEdge     *he;
X
X#ifdef TEST
XSolid *s;
Xs = he1->wloop->lface->fsolid;
X#endif
X    he = he2->nxt;
X    while(he != he1)
X    {
X        he->vtx = he2->vtx;
X        he = mate(he)->nxt;
X    }
X
X    he1->wloop->ledg = delhe(he1);
X    he2->wloop->ledg = delhe(he2);
X    he2->vtx->vedge = he2->nxt;
X    if(!he2->vtx->vedge->edg) he2->vtx->vedge = (HalfEdge *)NIL;
X
X    del(EDGE, (Node *)he1->edg, (Node *)he1->wloop->lface->fsolid);
X    del(VERTEX, (Node *)he1->vtx, (Node *)he1->wloop->lface->fsolid);
X#ifdef TEST
Xcheckv(s);
X#endif
X}
*EOF
if [ `wc -c <gwb/euler/lkev.c` -ne    1250 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/lkev.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/lkfmrh.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/lkfmrh.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid    lkfmrh(f1, f2)
XFace    *f1, *f2;
X{
X    Loop        *l;
X
X    while(l = f2->floops)
X    {
X        dellist(LOOP, l, f2);
X        addlist(LOOP, l, f1);
X    }
X    del(FACE, f2, f1->fsolid);
X}
*EOF
if [ `wc -c <gwb/euler/lkfmrh.c` -ne     854 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/lkfmrh.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/lmef.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/lmef.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
XFace            *lmef(he1, he2, nf)
XHalfEdge        *he1, *he2;
XId        nf;
X{
X        Face            *newface;
X        Loop            *newloop;
X        Edge            *newedge;
X        HalfEdge        *he, *nhe1, *nhe2, *temp;
X
X        newface = (Face *)new(FACE, he1->wloop->lface->fsolid);
X        newloop = (Loop *)new(LOOP, newface);
X        newedge = (Edge *)new(EDGE, he1->wloop->lface->fsolid);
X        newface->faceno = nf;
X        newface->flout = newloop;
X
X        he = he1;
X        while(he != he2)
X        {
X                he->wloop = newloop;
X                he = he->nxt;
X        }
X
X        nhe1 = addhe(newedge, he2->vtx, he1, MINUS);
X        nhe2 = addhe(newedge, he1->vtx, he2, PLUS);
X
X        nhe1->prv->nxt = nhe2;
X        nhe2->prv->nxt = nhe1;
X        temp = nhe1->prv;
X        nhe1->prv = nhe2->prv;
X        nhe2->prv = temp;
X
X        newloop->ledg = nhe1;
X        he2->wloop->ledg = nhe2;
X
X    return(newface);
X}
*EOF
if [ `wc -c <gwb/euler/lmef.c` -ne    1601 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/lmef.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/lmekr.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/lmekr.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid           lmekr(he1, he2)
XHalfEdge       *he1, *he2;
X{
X    Edge            *n_ed;
X    register HalfEdge    *n_he1, *n_he2;
X    Face            *f;
X    Loop            *l1, *l2;
X
X    l1 = he1->wloop;
X    l2 = he2->wloop;
X    f = l1->lface;
X
X    n_he1 = l2->ledg;
X    do
X    {
X        n_he1->wloop = l1;
X    }
X    while((n_he1 = n_he1->nxt) != l2->ledg);
X
X    n_ed = (Edge *) new(EDGE, f->fsolid);
X
X    n_he1 = addhe(n_ed, he1->vtx, he1, PLUS);
X    n_he2 = addhe(n_ed, he2->vtx, he2, MINUS);
X
X    n_he1->nxt = he2;
X    n_he2->nxt = he1;
X    he2->prv = n_he1;
X    he1->prv = n_he2;
X
X    if(f->flout == l2) f->flout = l1;
X
X    del(LOOP, l2, l2->lface);
X}
*EOF
if [ `wc -c <gwb/euler/lmekr.c` -ne    1315 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/lmekr.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/lmev.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/lmev.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid            lmev(he1, he2, vn, x, y, z)
XHalfEdge        *he1, *he2;
XId              vn;
Xfloat           x, y, z;
X{
X        HalfEdge        *he;
X        Vertex          *newvertex;
X        Edge            *newedge;
X
X#ifdef TEST
XSolid *s;
Xs = he1->wloop->lface->fsolid;
X#endif
X        newedge = (Edge *) new(EDGE, he1->wloop->lface->fsolid);
X        newvertex = (Vertex *) new(VERTEX, he1->wloop->lface->fsolid);
X        newvertex->vcoord[0] = x;
X        newvertex->vcoord[1] = y;
X        newvertex->vcoord[2] = z;
X        newvertex->vcoord[3] = 1.0;
X        newvertex->vertexno = vn;
X
X        he = he1;
X        while(he != he2)
X        {
X                he->vtx = newvertex;
X                he = mate(he)->nxt;
X        }
X
X        addhe(newedge, he2->vtx, he1, MINUS);
X        addhe(newedge, newvertex, he2, PLUS);
X
X        newvertex->vedge = he2->prv;
X        he2->vtx->vedge = he2;
X#ifdef TEST
Xcheckv(s);
X#endif
X}
*EOF
if [ `wc -c <gwb/euler/lmev.c` -ne    1577 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/lmev.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/lmfkrh.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/lmfkrh.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
XFace    *lmfkrh(l, fn)
XLoop    *l;
XId      fn;
X{
X    Face    *nf;
X
X    nf = (Face *) new(FACE, (Node *) l->lface->fsolid);
X    nf->faceno = fn;
X    nf->flout = l;
X    dellist(LOOP, (Node *) l, (Node *) (l->lface));
X    addlist(LOOP, (Node *) l, (Node *) nf);
X    return(nf);
X}
*EOF
if [ `wc -c <gwb/euler/lmfkrh.c` -ne     936 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/lmfkrh.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/loopglue.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/loopglue.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid    loopglue(fac)
XFace    *fac;
X{
X        HalfEdge        *h1, *h2, *h1next;
X
X#ifdef TEST
XSolid *s;
Xs = fac->fsolid;
X#endif
X
X        h1 = fac->floops->ledg;
X        h2 = fac->floops->nextl->ledg;
X        while(!match(h1, h2)) h2 = h2->nxt;
X        lmekr(h1, h2);
X#ifdef TEST
Xprintf("lmekr: "); solidls(s, 2);
X#endif
X        lkev(h1->prv, h2->prv);
X#ifdef TEST
Xprintf("lkev: "); solidls(s, 2);
X#endif
X        while(h1->nxt != h2)
X        {
X                h1next = h1->nxt;
X                lmef(h1->nxt, h1->prv, -1);
X#ifdef TEST
Xprintf("lmef: "); solidls(s, 2);
X#endif
X                lkev(h1->nxt, mate(h1->nxt));
X#ifdef TEST
Xprintf("lkev: "); solidls(s, 2);
X#endif
X                lkef(mate(h1), h1);
X#ifdef TEST
Xprintf("lkef: "); solidls(s, 2);
X#endif
X                h1 = h1next;
X        }
X        lkef(mate(h1), h1);
X#ifdef TEST
Xprintf("lkef: "); solidls(s, 2);
X#endif
X}
X
Xint             match(h1, h2)
XHalfEdge        *h1, *h2;
X{
X        return(contvv(h1->vtx, h2->vtx));
X}
*EOF
if [ `wc -c <gwb/euler/loopglue.c` -ne    1642 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/loopglue.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/mef.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/mef.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include    "gwb.h"
X
Xint    mef(s, vert1, vert2, fac1, fac2)
XSolid    *s;
XId    vert1, vert2;
XId    fac1, fac2;
X{
X    Face            *oldface, *newface;
X    register HalfEdge    *he1, *he2;
X
X    if(!(oldface = fface(s, fac1)))
X    {
X        fprintf(stderr, "mef: face %d not found\n", fac1);
X        return(ERROR);
X    }
X
X    /* get vert1 */
X    if(!(he1 = fhe1(oldface, vert1)))
X    {
X        fprintf(stderr, "mef: vertex %d not found\n", vert1);
X        return(ERROR);
X    }
X
X    /* get the next occurance of vert2 */
X    he2 = he1;
X    if(he2->vtx->vertexno != vert2)
X    do
X    {
X        he2 = he2->nxt;
X        if(he2 == he1)
X        {
X            fprintf(stderr, "mef: vertex %d not found\n",
X                vert2);
X            return(ERROR);
X        }
X    }
X    while(he2->vtx->vertexno != vert2);
X
X    newface = lmef(he1, he2, fac2);
X
X    return(SUCCESS);
X}
*EOF
if [ `wc -c <gwb/euler/mef.c` -ne    1509 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/mef.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/merge.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/merge.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid    merge2(s1, s2)
XSolid   *s1, *s2;
X{
X    Face    *f;
X    Edge    *e;
X    Vertex    *v;
X
X        while(f = s2->sfaces)
X        {
X                dellist(FACE, f, s2);
X                addlist(FACE, f, s1);
X        }
X        while(e = s2->sedges)
X        {
X                dellist(EDGE, e, s2);
X                addlist(EDGE, e, s1);
X        }
X        while(v = s2->sverts)
X        {
X                dellist(VERTEX, v, s2);
X                addlist(VERTEX, v, s1);
X        }
X        del(SOLID, s2, NIL);
X}
*EOF
if [ `wc -c <gwb/euler/merge.c` -ne    1166 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/merge.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/mev.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/mev.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xint     mev(s, fn, vn1, vn2, x, y, z)
XSolid   *s;
XId      fn, vn1, vn2;
Xfloat   x, y, z;
X{
X        Face            *oldface;
X        HalfEdge        *he;
X
X        if((oldface = fface(s, fn)) == NIL)
X        {
X                fprintf(stderr,
X                        "mev: face %d not found\n", fn);
X                return(ERROR);
X        }
X        if((he = fhe1(oldface, vn1)) == NIL)
X        {
X                fprintf(stderr,
X                        "mev: vertex %d not found in face %d\n",
X                                 vn1, fn);
X                return(ERROR);
X        }
X
X        lmev(he, he, vn2, x, y, z);
X
X        return(SUCCESS);
X}
*EOF
if [ `wc -c <gwb/euler/mev.c` -ne    1299 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/mev.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/mvfs.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/mvfs.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
XSolid   *mvfs(fn, vn, x, y, z)
XId      fn, vn;
Xfloat   x, y, z;
X{
X        Solid           *newsolid;
X        Face            *newface;
X        Vertex          *newvertex;
X        HalfEdge        *newhe;
X        Loop            *newloop;
X
X    newsolid = (Solid *) new(SOLID, NIL);
X        newface = (Face *) new(FACE, newsolid);
X        newloop = (Loop *) new(LOOP, newface);
X        newvertex = (Vertex *) new(VERTEX, newsolid);
X        newhe = (HalfEdge *) new(HALFEDGE, NIL);
X
X        newface->faceno = fn;
X        newface->flout = newloop;
X        newloop->ledg = newhe;
X    newhe->wloop = newloop;
X    newhe->nxt = newhe->prv = newhe;
X    newhe->vtx = newvertex;
X    newhe->edg = NIL;
X        newvertex->vertexno = vn;
X        newvertex->vcoord[0] = x;
X        newvertex->vcoord[1] = y;
X        newvertex->vcoord[2] = z;
X        newvertex->vcoord[3] = 1.0;
X
X        return(newsolid);
X}
*EOF
if [ `wc -c <gwb/euler/mvfs.c` -ne    1549 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/mvfs.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/new.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/new.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xunsigned nodesize[] =
X{
X        sizeof(Solid), sizeof(Face), sizeof(Loop),
X        sizeof(HalfEdge), sizeof(Edge), sizeof(Vertex), 0,
X};
X
XNode    *new(what, where)
Xint     what;
XNode    *where;
X{
X        Node    *node;
X        char    *malloc();
X
X        node = (Node *) malloc(nodesize[what]);
X    if(node == NULL)
X        printf("new: malloc() failed!\n");
X
X        switch(what)
X        {
X                case SOLID:
X                        node->s.sfaces = (Face *) NIL;
X                        node->s.sedges = (Edge *) NIL;
X                        node->s.sverts = (Vertex *) NIL;
X                        break;
X                case FACE:
X                        addlist(FACE, node, where);
X                        node->f.floops = (Loop *) NIL;
X                        node->f.flout = (Loop *) NIL;
X                        break;
X                case LOOP:
X                        addlist(LOOP, node, where);
X                        break;
X                case EDGE:
X                        addlist(EDGE, node, where);
X                        break;
X                case VERTEX:
X                        addlist(VERTEX, node, where);
X                        node->v.vedge = (HalfEdge *) NIL;
X                        break;
X                default:
X                        break;
X        }
X        return(node);
X}
*EOF
if [ `wc -c <gwb/euler/new.c` -ne    1977 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/new.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/params.h"
sed -e 's/^X//' <<\*EOF > gwb/euler/params.h
X/* return codes and misc constants */
X# define        ERROR           -1
X# define        SUCCESS         -2
X# define        NIL             0
X# define        PI              3.141592653589793
X
X/* parameters for memory allocation routines */
X# define        SOLID           0
X# define        FACE            1
X# define        LOOP            2
X# define        HALFEDGE        3
X# define        EDGE            4
X# define        VERTEX          5
X
X/* coordinate plane names */
X# define        X               0
X# define        Y               1
X# define        Z               2
X
X/* orientations */
X# define        PLUS            0
X# define        MINUS           1
X
X/* macros */
X# define        mate(he)        (((he) == (he)->edg->he1) ? \
X                                (he)->edg->he2 : (he)->edg->he1)
X# define        max(x,y)        (((x) > (y)) ? (x) : (y))
X# define        abs(x)          (((x) > 0.0) ? (x) : -(x))
X
X/* global variables */
Xextern Id       maxf;           /* largest face no. given so far */
Xextern Id       maxv;           /* largest vertex no. given so far */
X
X/* epsilons for geometric tests */
Xextern double   EPS;
Xextern double   BIGEPS;
X
X# include "funcs.h"
*EOF
if [ `wc -c <gwb/euler/params.h` -ne    1187 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/params.h"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/revert.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/revert.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid    revert(s)
XSolid    *s;
X{
X    Face             *f;
X    Loop            *l;
X    register HalfEdge    *he, *henxt;
X    Vertex            *prev, *sav;
X
X    f = s->sfaces;
X    while(f)
X    {
X        l = f->floops;
X        while(l)
X        {
X            he = l->ledg;
X            do
X            {
X                /* revert the direction */
X                henxt = he->nxt;
X                he->nxt = he->prv;
X                he->prv = henxt;
X                he = henxt;
X            }
X            while(he != l->ledg);
X            prev = he->prv->vtx;
X            do
X            {
X                sav = he->vtx;
X                he->vtx = prev;
X                he->vtx->vedge = he;
X                prev = sav;
X                he = he->nxt;
X            }
X            while(he != l->ledg);
X            l = l->nextl;
X        }
X        f = f->nextf;
X    }
X}
*EOF
if [ `wc -c <gwb/euler/revert.c` -ne    1512 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/revert.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/rsweep2.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/rsweep2.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid    rsweep(s, nfaces)
XSolid   *s;
Xint     nfaces;
X{
X        HalfEdge        *first, *cfirst, *last, *scan;
X    matrix        m;
X    vector        v;
X
X    HalfEdge        *h;
X    Face            *headf, *tailf;
X    int             closed_figure;
X
X    if(s->sfaces->nextf)        /* does the solid have > 1 faces ? */
X    {
X        printf("closed figure...\n");
X        solidls(s, 2);
X            /* assume it's a lamina */
X        closed_figure = 1;
X            h = s->sfaces->floops->ledg;
X             lmev(h, mate(h)->nxt, ++maxv,
X                    h->vtx->vcoord[0],
X                    h->vtx->vcoord[1],
X                    h->vtx->vcoord[2]);
X            lkef(h->prv, mate(h->prv));
X               headf = s->sfaces;
X        printf("... opened\n");
X        solidls(s, 1);
X    }
X    else    closed_figure = 0;                  /* no, it's a wire */
X
X        getmaxnames(s);
X        first = s->sfaces->floops->ledg;
X        while(first->edg != first->nxt->edg) first = first->nxt;
X        last = first->nxt;
X        while(last->edg != last->nxt->edg) last = last->nxt;
X        cfirst = first;
X    matident(m);
X    matrotat(m, (360.0 / nfaces), 0.0, 0.0);
X        while(--nfaces)
X        {
X        vecmult(v, cfirst->nxt->vtx->vcoord, m);
X                lmev(cfirst->nxt, cfirst->nxt, ++maxv,
X                        v[0], v[1], v[2]);
X                scan = cfirst->nxt;
X                while(scan != last->nxt)
X                {
X            vecmult(v, scan->prv->vtx->vcoord, m);
X                    lmev(scan->prv, scan->prv, ++maxv,
X                            v[0], v[1], v[2]);
X                        lmef(scan->prv->prv, scan->nxt, ++maxf);
X                        scan = mate(scan->nxt->nxt);
X                }
X                last = scan;
X                cfirst = mate(cfirst->nxt->nxt);
X        }
X        tailf = lmef(cfirst->nxt, mate(first), ++maxf);
X        while(cfirst != scan)
X        {
X                lmef(cfirst, cfirst->nxt->nxt->nxt, ++maxf);
X                cfirst = mate(cfirst->prv)->prv;
X        }
X
X    if(closed_figure == 1)
X    {
X            lkfmrh(headf, tailf);
X        printf("lkfmrh done\n");
X            loopglue(headf);
X        printf("loopglue done\n");
X    }
X}
*EOF
if [ `wc -c <gwb/euler/rsweep2.c` -ne    2866 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/rsweep2.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/scan.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/scan.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
XFace    *fface(s, fn)
XSolid   *s;
XId      fn;
X{
X        Face    *f;
X
X        f = s->sfaces;
X        while(f)
X        {
X                if(f->faceno == fn)
X                        return(f);
X                f = f->nextf;
X        }
X        return((Face *) NIL);
X}
X
XHalfEdge        *fhe1(f, vn)
XFace            *f;
XId              vn;
X{
X        Loop        *l;
X    HalfEdge    *h;
X
X    l = f->floops;
X    while(l)
X    {
X        h = l->ledg;
X        do
X        {
X            if(h->vtx->vertexno == vn)
X                return(h);
X        }
X        while((h = h->nxt) != l->ledg);
X        l = l->nextl;
X    }
X    return((HalfEdge *) NIL);
X}
X
XHalfEdge        *fhe2(f, vn1, vn2)
XFace            *f;
XId              vn1, vn2;
X{
X        Loop        *l;
X    HalfEdge    *h;
X
X    l = f->floops;
X    while(l)
X    {
X        h = l->ledg;
X        do
X        {
X            if(h->vtx->vertexno == vn1 &&
X               h->nxt->vtx->vertexno == vn2)
X                return(h);
X        }
X        while((h = h->nxt) != l->ledg);
X        l = l->nextl;
X    }
X    return((HalfEdge *) NIL);
X}
*EOF
if [ `wc -c <gwb/euler/scan.c` -ne    1727 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/scan.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/scannames.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/scannames.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid    scannames(s)
XSolid    *s;
X{
X    register Vertex        *v;
X    register Face        *f;
X
X    maxv = maxf = 0;
X    v = s->sverts;
X    while(v)
X    {
X        if(v->vertexno > maxv) maxv = v->vertexno;
X        v = v->nextv;
X    }
X    f = s->sfaces;
X    while(f)
X    {
X        if(f->faceno > maxf) maxf = f->faceno;
X        f = f->nextf;
X    }
X}
*EOF
if [ `wc -c <gwb/euler/scannames.c` -ne    1009 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/scannames.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/solidls.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/solidls.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid    solidls(s, sw)
XSolid   *s;
Xint     sw;
X{
X    Face        *f;
X    Loop        *l;
X    Vertex        *v;
X    Edge        *e;
X    HalfEdge    *he;
X
X    printf("Faces:\n");
X    f = s->sfaces;
X    while(f)
X    {
X        facels(f, sw);
X        f = f->nextf;
X    }
X
X    if(sw>1)
X    {
X        printf("vertices:");
X        v = s->sverts;
X        while(v)
X        {
X            putchar('\n');
X            printf("%d <%5.1f, %5.1f, %5.1f, %5.1f>",
X                v->vertexno, v->vcoord[0], v->vcoord[1],
X                v->vcoord[2], v->vcoord[3]);
X            if(sw>2)
X            {
X                he = v->vedge;
X                if(he)
X                {
X                    do
X                    {
X                        e = he->edg;
X                        if(he == e->he1)
X                            printf(" +");
X                        else    printf(" -");
X                        printf("<%d,%d>",
X                        e->he1->vtx->vertexno,
X                        e->he2->vtx->vertexno);
X                    }
X                    while((he = mate(he)->nxt) != v->vedge);
X                }
X            }
X            v = v->nextv;
X        }
X        putchar('\n');
X        printf("Edges: <v1, v2, f1, f2>");
X        f = s->sfaces;
X        while(f)
X        {
X            l = f->floops;
X            while(l)
X            {
X                he = l->ledg;
X                do
X                {
X                    if(e = he->edg)
X                    {
X                        if(he == e->he1)
X                        {
X                        putchar('\n');
X                        printf("<%d, %d, %d, %d>",
X                        e->he1->vtx->vertexno,
X                        e->he2->vtx->vertexno,
X                        e->he1->wloop->lface->faceno,
X                        e->he2->wloop->lface->faceno);
X                        }
X                    }
X                }
X                while((he = he->nxt) != l->ledg);
X                l = l->nextl;
X            }
X            f = f->nextf;
X        }
X    }
X    putchar('\n');
X}
X
Xfacels(f, sw)
XFace *f;
Xint sw;
X{
X    Loop        *l;
X    Vertex        *v;
X    Edge        *e;
X    HalfEdge    *he;
X    register int    i;
X    int        breakline;
X
X    breakline = 8;
X    if(sw > 2) breakline = 4;
X
X    printf("Face no. %d:    ", f->faceno);
X
X    l = f->floops;
X    while(l)
X    {
X        he = l->ledg;
X        i = 0;
X        do
X        {
X            v = he->vtx;
X            e = he->edg;
X            if(sw > 2 && e)
X            {
X                if(he == e->he1)
X                    printf("%d +(%d,%d)-> ",
X                        v->vertexno,
X                        e->he1->vtx->vertexno,
X                        e->he2->vtx->vertexno);
X                else    printf("%d -(%d,%d)-> ",
X                        v->vertexno,
X                        e->he1->vtx->vertexno,
X                        e->he2->vtx->vertexno);
X            }
X            else printf("%d -> ", v->vertexno);
X            if((++i)%breakline == 0)
X                printf("\n        ");
X        }
X        while((he = he->nxt) != l->ledg);
X        if(l == f->flout)
X            printf("<outer>\n");
X        else    printf("<inner>\n");
X
X        l = l->nextl;
X        if(l) printf("        ");
X    }
X    printf("equation: ");
X    vecprint(f->feq);
X}
*EOF
if [ `wc -c <gwb/euler/solidls.c` -ne    3937 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/solidls.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/svolume.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/svolume.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xdouble  svolume(s)
XSolid   *s;
X{
X        Face            *f;
X        Loop            *l;
X        HalfEdge        *he1, *he2;
X        vector          c;
X        double          res;
X
X        res = 0.0;
X        f = s->sfaces;
X        while(f)
X        {
X                l = f->floops;
X                while(l)
X                {
X                        he1 = l->ledg;
X                        he2 = he1->nxt;
X                        do
X                        {
X                                cross(c, he2->vtx->vcoord,
X                                        he1->vtx->vcoord);
X                                res += dot(he2->nxt->vtx->vcoord, c)
X
X                                         / 6.0;
X                        }
X                        while((he2 = he2->nxt) != he1);
X                        l = l->nextl;
X                }
X                f = f->nextf;
X        }
X        return(res);
X}
*EOF
if [ `wc -c <gwb/euler/svolume.c` -ne    1553 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/svolume.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/test1.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/test1.c
X# include "gwb.h"
X
Xmain()
X{
X    Solid    *s;
X
X    s = mvfs(1, 1, 0.0, 0.0, 0.0);
Xsolidls(s, 3);
X    mev(s, 1, 1, 2, 1.0, 0.0, 0.0);
Xsolidls(s, 3);
X    mev(s, 1, 2, 3, 1.0, 1.0, 0.0);
Xsolidls(s, 3);
X    listsolid(s);
X}
*EOF
if [ `wc -c <gwb/euler/test1.c` -ne     218 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/test1.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/test2.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/test2.c
X# include "gwb.h"
X
Xmain()
X{
X    Solid *s;
X
X    s = mvfs(1,1,0.0,0.0,0.0);
X    solidls(s, 3);
X    mev(s,1,1,2,1.0,0.0,0.0);
X    solidls(s, 3);
X    mev(s,1,2,3,1.0,1.0,0.0);
X    solidls(s, 3);
X    mef(s,1,3,1,2);
X    solidls(s, 3);
X}
*EOF
if [ `wc -c <gwb/euler/test2.c` -ne     232 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/test2.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/test3.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/test3.c
X# include "gwb.h"
X
Xmain()
X{
X    Solid    *s;
X
X    s = mvfs(1, 1, 0.0, 1.0, 0.0);
X    mev(s, 1, 1, 2, 1.0, 2.0, 0.0);
X    mev(s, 1, 2, 3, 2.0, 1.0, 0.0);
X    rsweep(s, 3);
X    solidls(s, 2);
X}
*EOF
if [ `wc -c <gwb/euler/test3.c` -ne     192 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/test3.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/test5.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/test5.c
X# include "gwb.h"
X
XSolid *cursolid;
X
Xmain()
X{
X    cursolid = torus(10.0, 3.0, 16, 8);
X    solidls(cursolid, 3);
X}
*EOF
if [ `wc -c <gwb/euler/test5.c` -ne     114 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/test5.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/torus.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/torus.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
XSolid   *torus(r1, r2, nf1, nf2)
Xfloat   r1, r2;
Xint     nf1, nf2;
X{
X        Solid        *s;
X
X        s = circle(0.0, r1, r2, 0.0, nf2);
X        rsweep(s, nf1);
X        return(s);
X}
*EOF
if [ `wc -c <gwb/euler/torus.c` -ne     842 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/torus.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/euler ]
then
echo "Making directory ./gwb/euler"
mkdir ./gwb/euler
fi
echo "extracting file gwb/euler/vector.c"
sed -e 's/^X//' <<\*EOF > gwb/euler/vector.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid   matident(m)
Xmatrix m;
X{
X       m[0][0] = 1.0;  m[0][1] = 0.0;  m[0][2] = 0.0;  m[0][3] = 0.0;
X       m[1][0] = 0.0;  m[1][1] = 1.0;  m[1][2] = 0.0;  m[1][3] = 0.0;
X       m[2][0] = 0.0;  m[2][1] = 0.0;  m[2][2] = 1.0;  m[2][3] = 0.0;
X       m[3][0] = 0.0;  m[3][1] = 0.0;  m[3][2] = 0.0;  m[3][3] = 1.0;
X}
X
Xvoid   mattrans(m, tx, ty, tz)
Xmatrix m;
Xfloat  tx, ty, tz;
X{
X       matrix  mt;
X
X       maketrans(mt, tx, ty, tz);
X       matmult(m, m, mt);
X}
X
Xvoid   matrotat(m, rx, ry, rz)
Xmatrix m;
Xfloat  rx, ry, rz;
X{
X       matrix  mr;
X
X       makerotat(mr, rx, ry, rz);
X       matmult(m, m, mr);
X}
X
Xvoid   matmult(m, m1, m2)
Xmatrix m, m1, m2;
X{
X       int     i, j, k;
X       matrix  res;
X
X       for(i=0; i<4; i++)
X               for(j=0; j<4; j++)
X               {
X                       res[i][j] = 0.0;
X                       for(k=0; k<4; k++)
X                               res[i][j] += m1[i][k] * m2[k][j];
X               }
X       for(i=0; i<4; i++)
X               for(j=0; j<4; j++)
X                       m[i][j] = res[i][j];
X}
X
Xvoid   vecmult(v1, v2, m)
Xvector v1, v2;
Xmatrix m;
X{
X       int     i, j;
X       vector  res;
X
X       for(i=0; i<4; i++)
X       {
X               res[i] = 0.0;
X               for(j=0; j<4; j++)
X                       res[i] += v2[j] * m[i][j];
X       }
X       for(i=0; i<4; i++)
X               v1[i] = res[i];
X}
X
Xdouble dot(v1, v2)
Xvector v1, v2;
X{
X       return(v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2]);
X}
X
Xvoid   cross(v1, v2, v3)
Xvector v1, v2, v3;
X{
X       vector  res;
X
X       res[0] = v2[1]*v3[2] - v2[2]*v3[1];
X       res[1] = v2[2]*v3[0] - v2[0]*v3[2];
X       res[2] = v2[0]*v3[1] - v2[1]*v3[0];
X       v1[0] = res[0];
X       v1[1] = res[1];
X       v1[2] = res[2];
X}
X
Xdouble normalize(v)
Xvector v;
X{
X       double  l;
X
X       l = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
X       v[0] /= l;
X       v[1] /= l;
X       v[2] /= l;
X       return(l);
X}
X
Xvoid   veccopy(v1, v2)
Xvector v1, v2;
X{
X       v1[0] = v2[0];
X       v1[1] = v2[1];
X       v1[2] = v2[2];
X}
X
Xvoid   vecplus(res, v1, v2)
Xvector res, v1, v2;
X{
X       res[0] = v1[0] + v2[0];
X       res[1] = v1[1] + v2[1];
X       res[2] = v1[2] + v2[2];
X}
X
Xvoid   vecminus(res, v1, v2)
Xvector res, v1, v2;
X{
X       res[0] = v1[0] - v2[0];
X       res[1] = v1[1] - v2[1];
X       res[2] = v1[2] - v2[2];
X}
X
Xvoid   vecnull(v, tol)
Xvector v;
Xdouble tol;
X{
X       if(comp(v[0], 0.0, tol) == 0 &&
X          comp(v[1], 0.0, tol) == 0 &&
X          comp(v[2], 0.0, tol) == 0)
X               return(1);
X       return(0);
X}
X
Xint    vecequal(v1, v2, tol)
Xvector v1, v2;
Xdouble tol;
X{
X       vector  tmp;
X
X       vecminus(tmp, v1, v2);
X       return(vecnull(tmp, tol));
X}
X
Xint    comp(a, b, tol)
Xdouble a, b, tol;
X{
X       double  delta;
X
X       delta = fabs(a - b);
X       if(delta < tol)         return(0);
X       else if(a > b)          return(1);
X       else                    return(-1);
X}
X
Xint    dropcoord(v)
Xvector v;
X{
X       double  x, y, z;
X
X       x = fabs(v[0]);
X       y = fabs(v[1]);
X       z = fabs(v[2]);
X       if(x > y)
X               if(x > z)
X                       return(X);
X               else    return(Z);
X       else
X               if(y > z)
X                       return(Y);
X               else    return(Z);
X}
X
Xvoid   vecprint(v)
Xvector v;
X{
X       printf("%f %f %f %f\n", v[0], v[1], v[2], v[3]);
X}
X
Xvoid   matprint(m)
Xmatrix m;
X{
X       printf("%f %f %f %f\n", m[0][0], m[0][1], m[0][2], m[0][3]);
X       printf("%f %f %f %f\n", m[1][0], m[1][1], m[1][2], m[1][3]);
X       printf("%f %f %f %f\n", m[2][0], m[2][1], m[2][2], m[2][3]);
X       printf("%f %f %f %f\n", m[3][0], m[3][1], m[3][2], m[3][3]);
X}
X
Xvoid   maketrans(m, tx, ty, tz)
Xmatrix m;
Xdouble tx, ty, tz;
X{
X       matident(m);
X       m[3][0] = tx;
X       m[3][1] = ty;
X       m[3][2] = tz;
X}
X
Xvoid   makerotat(m, rx, ry, rz)
Xmatrix m;
Xfloat  rx, ry, rz;
X{
X       matrix  mx, my, mz;
X
X       matident(m);
X       makexrotat(mx, rx);
X       makeyrotat(my, ry);
X       makezrotat(mz, rz);
X       matmult(m, m, mx);
X       matmult(m, m, my);
X       matmult(m, m, mz);
X}
X
Xvoid   makezrotat(m, rz)
Xmatrix m;
Xfloat  rz;
X{
X       double  co, si, cos(), sin();
X
X       co = cos(rz/180.0*PI);
X       si = sin(rz/180.0*PI);
X       matident(m);
X       m[0][0] = co;
X       m[0][1] = si;
X       m[1][0] = -si;
X       m[1][1] = co;
X}
X
Xvoid   makexrotat(m, rx)
Xmatrix m;
Xfloat  rx;
X{
X       double  co, si, cos(), sin();
X
X       co = cos(rx/180.0*PI);
X       si = sin(rx/180.0*PI);
X       matident(m);
X       m[1][1] = co;
X       m[1][2] = si;
X       m[2][1] = -si;
X       m[2][2] = co;
X}
X
Xvoid   makeyrotat(m, ry)
Xmatrix m;
Xfloat  ry;
X{
X       double  co, si, cos(), sin();
X
X       co = cos(ry/180.0*PI);
X       si = sin(ry/180.0*PI);
X       matident(m);
X       m[2][2] = co;
X       m[2][0] = si;
X       m[0][2] = -si;
X       m[0][0] = co;
X}
*EOF
if [ `wc -c <gwb/euler/vector.c` -ne    4436 ]
then
    echo "lengths do not match -- Bad Copy of gwb/euler/vector.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/Makefile"
sed -e 's/^X//' <<\*EOF > gwb/setop/Makefile
XLIB =  ../lib/setoplib.a
X
XSRC =  contfp.c dosetopgen.c dovertexonf.c inside.c sectors.c\
X       separ.c setop.c setopcl.c setopgen.c setopgetnbr.c\
X       sinsert.c srecledges.c sreclsectors.c\
X       updmaxnames.c vtxfaccl.c vtxvtxcl.c\
X       setopconnect.c ssortedges.c setopfinish.c
X
X$(LIB):                $(SRC)
X       csh -f Update $(LIB) $?
X
Xtestsetop:     $(LIB) ../lib/splitlib.a ../lib/gwblib.a testsetop.o
X       cc -g -o testsetop testsetop.o $(LIB) ../lib/splitlib.a \
X               ../lib/gwblib.a -lm
X
Xc.o:;
X       cc -c -g -DTEST $*.c
*EOF
if [ `wc -c <gwb/setop/Makefile` -ne     478 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/Makefile"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/Update"
sed -e 's/^X//' <<\*EOF > gwb/setop/Update
Xset list = ($argv[2-])
X@ n = 0
Xforeach f ($argv[2-])
Xecho cc -c -g $f
Xcc -c -g $f
X@ n++
Xset list[$n] = ${f:r}.o
Xend
Xar r $1 $list[1-]
Xecho ar r $1 $list[1-]
Xranlib $1
Xecho ranlib $1
Xrm $list[1-]
Xecho rm $list[1-]
*EOF
if [ `wc -c <gwb/setop/Update` -ne     213 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/Update"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/contfp.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/contfp.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "../gwb.h"
X
Xint     contfp(f, x, y, z)
XFace    *f;
Xdouble  x, y, z;
X{
X        Vertex      aux;
X
X    aux.vcoord[0] = x;
X    aux.vcoord[1] = y;
X    aux.vcoord[2] = z;
X
X    return(contfv(f, &aux));
X}
*EOF
if [ `wc -c <gwb/setop/contfp.c` -ne     847 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/contfp.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/dosetopgen.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/dosetopgen.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "setop.h"
X# define ECHO 1
X
Xextern HalfEdge *hithe;
Xextern Vertex *hitvertex;
X
Xvoid      dosetopgenerate(e, f, BvsA)
XEdge      *e;
XFace      *f;
Xint       BvsA;
X{
X     Vertex        *v1, *v2;
X     double        d1, d2, t, x, y, z;
X     int           s1, s2, cont;
X
X     v1 = e->he1->vtx;
X     v2 = e->he2->vtx;
X     s1 = comp((d1 = dist(v1->vcoord, f->feq)), 0.0, EPS);
X     s2 = comp((d2 = dist(v2->vcoord, f->feq)), 0.0, EPS);
X#ifdef TEST
Xprintf("test edge %d-%d vs. face %d: d1, d2 = %f (%d) %f (%d)\n",
Xv1->vertexno, v2->vertexno, f->faceno, d1, s1, d2, s2);
X#endif
X     if(s1 == -1 && s2 == 1 || s1 == 1 && s2 == -1)
X     {
X          t = d1 / (d1 - d2);
X          x = v1->vcoord[0] + t*(v2->vcoord[0]-v1->vcoord[0]);
X          y = v1->vcoord[1] + t*(v2->vcoord[1]-v1->vcoord[1]);
X          z = v1->vcoord[2] + t*(v2->vcoord[2]-v1->vcoord[2]);
X          cont = contfp(f, x, y, z);
X#ifdef TEST
Xprintf("cont = %d\n", cont);
X#endif
X          if(cont == 1)
X          {
X               lmev(e->he1, e->he2->nxt, ++maxv, x, y, z);
X               addsovf(e->he1->vtx, f, BvsA);
X           process_edge(e->he1->prv->edg, f->fsolid, BvsA);
X          }
X          else if(cont == 2)
X          {
X               lmev(e->he1, e->he2->nxt, ++maxv, x, y, z);
X               lmev(hithe, mate(hithe)->nxt, ++maxv, x, y, z);
X               addsovv(e->he1->vtx, hithe->vtx, BvsA);
X           process_edge(e->he1->prv->edg, f->fsolid, BvsA);
X          }
X          else if(cont == 3)
X          {
X               lmev(e->he1, e->he2->nxt, ++maxv, x, y, z);
X               addsovv(e->he1->vtx, hitvertex, BvsA);
X           process_edge(e->he1->prv->edg, f->fsolid, BvsA);
X          }
X     }
X     else
X     {
X          if(s1 == 0)
X               dovertexonface(v1, f, BvsA);
X          if(s2 == 0)
X               dovertexonface(v2, f, BvsA);
X     }
X}
X
Xvoid      addsovf(v, f, BvsA)
XVertex    *v;
XFace      *f;
Xint       BvsA;
X{
X      int     i;
X
X      if(BvsA)
X      {
X      for(i=0; i<nvtxb; i++)
X          if(sonvb[i].v == v && sonvb[i].f == f)
X          return;
X          sonvb[nvtxb].v = v;
X          sonvb[nvtxb++].f = f;
X#ifdef ECHO
Xprintf("setop: vertex of B: %d on face of A: %d\n", v->vertexno, f->faceno);
X#endif
X      }
X      else
X      {
X      for(i=0; i<nvtxa; i++)
X          if(sonva[i].v == v && sonva[i].f == f)
X          return;
X      sonva[nvtxa].v = v;
X      sonva[nvtxa++].f = f;
X#ifdef ECHO
Xprintf("setop: vertex of A: %d on face of B: %d\n", v->vertexno, f->faceno);
X#endif
X      }
X}
X
Xvoid      addsovv(v1, v2, BvsA)
XVertex    *v1, *v2;
Xint       BvsA;
X{
X      int     i;
X
X      if(BvsA)
X      {
X      for(i=0; i<nvtx; i++)
X          if(sonvv[i].vb == v1 && sonvv[i].va == v2)
X          return;
X          sonvv[nvtx].vb = v1;
X          sonvv[nvtx++].va = v2;
X#ifdef ECHO
Xprintf("setop: coincident vertices: (B) %d (A) %d\n", v2->vertexno,
X v1->vertexno);
X#endif
X      }
X      else
X      {
X      for(i=0; i<nvtx; i++)
X          if(sonvv[i].vb == v2 && sonvv[i].va == v1)
X          return;
X          sonvv[nvtx].vb = v2;
X          sonvv[nvtx++].va = v1;
X#ifdef ECHO
Xprintf("setop: coincident vertices: (A) %d (B) %d\n", v1->vertexno,
X v2->vertexno);
X#endif
X      }
X}
*EOF
if [ `wc -c <gwb/setop/dosetopgen.c` -ne    3812 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/dosetopgen.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/dovertexonf.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/dovertexonf.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "setop.h"
X
Xextern HalfEdge *hithe;
Xextern Vertex *hitvertex;
X
Xvoid      dovertexonface(v, f, BvsA)
XVertex    *v;
XFace      *f;
Xint       BvsA;
X{
X     int           cont;
X
X     cont = contfv(f, v);
X#ifdef TEST
Xprintf("test vertex %d: cont = %d\n", v->vertexno, cont);
X#endif
X     if(cont == 1)
X     {
X          addsovf(v, f, BvsA);
X     }
X     else if(cont == 2)
X     {
X          lmev(hithe, mate(hithe)->nxt, ++maxv,
X               v->vcoord[0], v->vcoord[1], v->vcoord[2]);
X          addsovv(v, hithe->vtx, BvsA);
X     }
X     else if(cont == 3)
X     {
X          addsovv(v, hitvertex, BvsA);
X     }
X}
*EOF
if [ `wc -c <gwb/setop/dovertexonf.c` -ne    1251 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/dovertexonf.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/funcs.h"
sed -e 's/^X//' <<\*EOF > gwb/setop/funcs.h
X# include    <math.h>
X
X# define    void        int
X/*# define    fabs(x)        (((x) < 0.0) ? (-x) : (x))*/
X
Xvoid        addlist();
XHalfEdge        *addhe();
XSolid        *ball();
XSolid        *block();    /* MAC: clash with mem.h */
XSolid        *circle();
XSolid        *cyl();
XHalfEdge        *delhe();
XFace        *fface();
XHalfEdge        *fhe1();
XHalfEdge        *fhe2();
XFace            *lmef();
XFace            *lmfkrh();
Xvoid            lmev();
Xint         mev();
XSolid       *mvfs();
XNode        *new();
XSolid        *torus();
X
Xdouble        dot();
Xdouble        normalize();
Xdouble        dist();
*EOF
if [ `wc -c <gwb/setop/funcs.h` -ne     608 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/funcs.h"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/gwb.h"
sed -e 's/^X//' <<\*EOF > gwb/setop/gwb.h
X# include <stdio.h>
X# define VAX 1
X
Xtypedef float                   vector[4];
Xtypedef float                   matrix[4][4];
X#ifdef VAX
Xtypedef short                   Id;
X#endif
X#ifdef MAC
Xtypedef int                     Id;
X#endif
Xtypedef struct solid            Solid;
Xtypedef struct face             Face;
Xtypedef struct loop             Loop;
Xtypedef struct halfedge         HalfEdge;
Xtypedef struct vertex           Vertex;
Xtypedef struct edge             Edge;
Xtypedef union nodes             Node;
X
Xstruct solid
X{
X        Face            *sfaces;        /* pointer to list of faces */
X        Edge            *sedges;        /* pointer to list of edges */
X        Vertex          *sverts;        /* pointer to list of vertices */
X};
Xstruct face
X{
X        Id              faceno;         /* face identifier */
X        Solid           *fsolid;        /* back pointer to solid */
X        Loop            *flout;         /* pointer to outer loop */
X        Loop            *floops;        /* pointer to list of loops */
X        vector          feq;            /* face equation */
X        Face            *nextf;         /* pointer to next face */
X        Face            *prevf;         /* pointer to previous face */
X};
Xstruct loop
X{
X        HalfEdge        *ledg;          /* pointer to ring of halfedges */
X        Face            *lface;         /* back pointer to face */
X        Loop            *nextl;         /* pointer to next loop */
X        Loop            *prevl;         /* pointer to previous loop */
X};
Xstruct edge
X{
X        HalfEdge        *he1;           /* pointer to right halfedge */
X        HalfEdge        *he2;           /* pointer to left halfedge */
X        Edge            *nexte;         /* pointer to next edge */
X        Edge            *preve;         /* pointer to previous edge */
X};
Xstruct halfedge
X{
X        Edge            *edg;           /* pointer to parent edge */
X        Vertex          *vtx;           /* pointer to starting vertex */
X        Loop            *wloop;         /* back pointer to loop */
X        HalfEdge        *nxt;           /* pointer to next halfedge */
X        HalfEdge        *prv;           /* pointer to previous halfedge */
X};
Xstruct vertex
X{
X        Id              vertexno;       /* vertex identifier */
X        HalfEdge        *vedge;         /* pointer to an adjacent halfedge */
X        vector          vcoord;         /* vertex coordinates */
X        Vertex          *nextv;         /* pointer to next vertex */
X        Vertex          *prevv;         /* pointer to previous vertex */
X};
Xunion nodes
X{
X        Solid           s;
X        Face            f;
X        Loop            l;
X        HalfEdge        h;
X        Vertex          v;
X        Edge            e;
X};
X
X# include "params.h"
*EOF
if [ `wc -c <gwb/setop/gwb.h` -ne    2765 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/gwb.h"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/inside.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/inside.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
X/*
X**    Geometric WorkBench V 0.6
X**
X**    Copyright (c) 1984 TEKES-Project, Helsinki Univ. of Tech.
X**
X**    inside()
X**    - version 0.1
X**
X**    Form a vector pointing at the inside of the face of halfedge he
X**
X**    History:
X**    - written by MaM (Feb 19, 1984)
X*/
X
Xvoid        inside(he, in)
XHalfEdge    *he;
Xvector        in;
X{
X    vector        eq, dir;
X
X    vecminus(dir, he->nxt->vtx->vcoord, he->vtx->vcoord);
X    faceeq(he->wloop->lface->flout, eq);
X    cross(in, eq, dir);
X
X# ifdef TEST
Xprintf("in   : %f %f %f\n", in[0], in[1], in[2]);
Xprintf("norm : %f %f %f\n", eq[0], eq[1], eq[2]);
Xprintf("dir  : %f %f %f\n", dir[0], dir[1], dir[2]);
X# endif
X}
*EOF
if [ `wc -c <gwb/setop/inside.c` -ne    1324 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/inside.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/params.h"
sed -e 's/^X//' <<\*EOF > gwb/setop/params.h
X/* return codes and misc constants */
X# define        ERROR           -1
X# define        SUCCESS         -2
X# define        NIL             0
X# define        PI              3.141592653589793
X
X/* parameters for memory allocation routines */
X# define        SOLID           0
X# define        FACE            1
X# define        LOOP            2
X# define        HALFEDGE        3
X# define        EDGE            4
X# define        VERTEX          5
X
X/* coordinate plane names */
X# define        X               0
X# define        Y               1
X# define        Z               2
X
X/* orientations */
X# define        PLUS            0
X# define        MINUS           1
X
X/* macros */
X# define        mate(he)        (((he) == (he)->edg->he1) ? \
X                                (he)->edg->he2 : (he)->edg->he1)
X# define        max(x,y)        (((x) > (y)) ? (x) : (y))
X# define        abs(x)          (((x) > 0.0) ? (x) : -(x))
X
X/* global variables */
Xextern Id       maxf;           /* largest face no. given so far */
Xextern Id       maxv;           /* largest vertex no. given so far */
X
X/* epsilons for geometric tests */
Xextern double   EPS;
Xextern double   BIGEPS;
X
X# include "funcs.h"
*EOF
if [ `wc -c <gwb/setop/params.h` -ne    1187 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/params.h"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/sectors.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/sectors.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
X# define MAXSECTORS 100
X
Xextern struct nb
X{
X     HalfEdge  *he;
X     vector    ref1;
X     vector    ref2;
X     vector    ref12;
X} nba[MAXSECTORS], nbb[MAXSECTORS];
X
Xint  sectortest(i, j)
Xint  i, j;
X{
X     vector    intrs;
X     HalfEdge  *h1, *h2;
X     int       c1, c2;
X
X     h1 = nba[i].he;
X     h2 = nbb[j].he;
X
X     cross(intrs, h1->wloop->lface->feq, h2->wloop->lface->feq);
X     if(vecnull(intrs, EPS))
X          return(sectoroverlap(h1, h2));
X     c1 = sctrwithin(intrs, nba[i].ref1, nba[i].ref2, nba[i].ref12);
X     c2 = sctrwithin(intrs, nbb[j].ref1, nbb[j].ref2, nbb[j].ref12);
X     if(c1 && c2) return(1);
X     else
X     {
X     intrs[0] = -intrs[0];
X     intrs[1] = -intrs[1];
X     intrs[2] = -intrs[2];
X     c1 = sctrwithin(intrs, nba[i].ref1, nba[i].ref2, nba[i].ref12);
X     c2 = sctrwithin(intrs, nbb[j].ref1, nbb[j].ref2, nbb[j].ref12);
X     if(c1 && c2) return(1);
X     }
X     return(0);
X}
X
Xint          sctrwithin(dir, ref1, ref2, ref12)
Xvector       dir, ref1, ref2, ref12;
X{
X     vector  c1, c2;
X     int     t1, t2;
X
X     cross(c1, ref1, dir);
X     if(vecnull(c1, EPS))
X          return(dot(ref1, dir) > 0.0);
X     cross(c2, dir, ref2);
X     if(vecnull(c2, EPS))
X          return(dot(ref2, dir) > 0.0);
X     t1 = comp(dot(c1, ref12), 0.0, EPS*EPS);
X     t2 = comp(dot(c2, ref12), 0.0, EPS*EPS);
X     return(t1>0 && t2>0);
X}
X
Xint             sectoroverlap(h1, h2)
XHalfEdge        *h1, *h2;
X{
X         return(1);
X}
*EOF
if [ `wc -c <gwb/setop/sectors.c` -ne    2092 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/sectors.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/separ.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/separ.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "setop.h"
X
X/*
X**    Geometric WorkBench V 0.6
X**
X**    Copyright (c) 1984 TEKES-Project, Helsinki Univ. of Tech.
X**
X**    separ.c
X**    - version 0.1
X**
X**    Create null edges and store them into lone
X**
X**    History:
X**    - combined from earlier pieces (Spring 1984, MaM)
X**    - modified to take null edges already inserted into account
X**      (April 1986, MaM)
X**
X**    Testing:
X**    - TEST        Echo operation
X**    - TESTALL    List faces after operation
X*/
X
X/* separate edge-sequence from ... to */
Xvoid        separ1(from, to, type)
XHalfEdge    *from, *to;
Xint        type;
X{
X#ifdef TEST
Xprintf("separ1: from <%d,%d> to <%d,%d>\n",
Xfrom->vtx->vertexno, from->nxt->vtx->vertexno,
Xto->vtx->vertexno, to->nxt->vtx->vertexno);
X#endif
X
X    /* recover from null edges already inserted */
X    if(nulledge(from->prv) && strutnulledge(from->prv))
X    {
X#ifdef TEST
Xprintf("separ1: strut null edge at front of from\n");
X#endif
X        /* look at orientation */
X        if(from->prv == from->prv->edg->he2)
X        {
X            from = from->prv->prv;
X#ifdef TEST
Xprintf("separ1: new from <%d,%d>\n",
Xfrom->vtx->vertexno, from->nxt->vtx->vertexno);
X#endif
X        }
X    }
X    if(nulledge(to->prv) && strutnulledge(to->prv))
X    {
X#ifdef TEST
Xprintf("separ1: null edge at front of to\n");
X#endif
X        if(to->prv == to->prv->edg->he1)
X        {
X            to = to->prv->prv;
X#ifdef TEST
Xprintf("separ1: new to <%d,%d>\n",
Xto->vtx->vertexno, to->nxt->vtx->vertexno);
X#endif
X        }
X    }
X    if(from->vtx != to->vtx)
X    {
X        if(from->prv == mate(to->prv))
X        {
X            from = from->prv;
X#ifdef TEST
Xprintf("separ1: split null edge at front of from, to\n");
Xprintf("separ1: new from <%d,%d>",
Xfrom->vtx->vertexno, from->nxt->vtx->vertexno);
X#endif
X        }
X        else if(from->prv->vtx == to->vtx)
X        {
X            from = from->prv;
X#ifdef TEST
Xprintf("separ1: split null edge at front of from\n");
Xprintf("separ1: new from <%d,%d>",
Xfrom->vtx->vertexno, from->nxt->vtx->vertexno);
X#endif
X        }
X        else if(to->prv->vtx == from->vtx)
X        {
X            to = to->prv;
X#ifdef TEST
Xprintf("separ1: split null edge at front of to\n");
Xprintf("separ1: new to <%d,%d>",
Xto->vtx->vertexno, to->nxt->vtx->vertexno);
X#endif
X        }
X    }
X
X    lmev(from, to, ++maxv,
X        from->vtx->vcoord[0],
X        from->vtx->vcoord[1],
X        from->vtx->vcoord[2]);
X
X#ifdef TESTALL
Xfacels(from->wloop->lface, 0);
X#endif
X
X    if(type == 0)    sonea[nedga++] = from->prv->edg;
X    else        soneb[nedgb++] = from->prv->edg;
X}
X
X/* separate `interior' of the face of he */
Xvoid        separ2(he, type, orient)
XHalfEdge    *he;
Xint        type, orient;
X{
X    HalfEdge    *tmp;
X
X#ifdef TEST
Xprintf("separ2: from %d in face %d\n",
Xhe->vtx->vertexno, he->wloop->lface->faceno);
X#endif
X
X    /* recover from null edges inserted */
X    if(nulledge(he->prv))
X    {
X        if(((he->prv == he->prv->edg->he1) && orient) ||
X           ((he->prv == he->prv->edg->he2) && !orient))
X        {
X            he = he->prv;
X#ifdef TEST
Xprintf("separ2: new from %d\n", he->vtx->vertexno);
X#endif
X        }
X    }
X
X    lmev(he, he, ++maxv, he->vtx->vcoord[0], he->vtx->vcoord[1],
X        he->vtx->vcoord[2]);
X
X    /* a piece of Black Art: reverse orientation of the null edge */
X    if(orient)
X    {
X#ifdef TEST
Xprintf("separ2: reverse orientation\n");
X#endif
X        tmp = he->prv->edg->he1;
X        he->prv->edg->he1 = he->prv->edg->he2;
X        he->prv->edg->he2 = tmp;
X    }
X
X#ifdef TESTALL
Xfacels(he->wloop->lface, 0);
X#endif
X
X    if(type == 0)    sonea[nedga++] = he->prv->edg;
X    else        soneb[nedgb++] = he->prv->edg;
X}
X
X/* add ring null edge */
Xvoid    makering(f, x, y, z, type)
XFace    *f;
Xdouble    x, y, z;
Xint    type;
X{
X    HalfEdge    *he1, *he2;
X
X#ifdef TEST
Xprintf("makering: add ring into face %d\n", f->faceno);
X#endif
X    lmev(f->flout->ledg, f->flout->ledg, ++maxv, x, y, z);
X    he1 = f->flout->ledg->prv;
X    lmev(he1, he1, ++maxv, x, y, z);
X    he2 = he1->prv;
X    lkemr(he1->prv->prv->prv, he1);
X
X#ifdef TESTALL
Xfacels(f, 0);
X#endif
X
X    if(type == 1)    sonea[nedga++] = he2->edg;
X    else        soneb[nedgb++] = he2->edg;
X}
X
Xint         nulledge(he)
XHalfEdge        *he;
X{
X    return(vecequal(he->vtx->vcoord, he->nxt->vtx->vcoord), 0.0);
X}
X
Xint        strutnulledge(he)
XHalfEdge    *he;
X{
X    if(/* length > 2 && */ he == mate(he)->nxt || he == mate(he)->prv)
X        return(1);
X    return(0);
X}
X
*EOF
if [ `wc -c <gwb/setop/separ.c` -ne    5082 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/separ.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/setop.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/setop.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "setop.h"
X# define ECHO 1
X# define TESTALL 1
X
Xint Gtestspecials;
X
Xint     setop(A, B, res, op)
XSolid   *A, *B, **res;
Xint     op;
X{
X        Face    *f;
X
X        for(f = A->sfaces; f != NIL; f = f->nextf)
X                faceeq(f->flout, f->feq);
X        for(f = B->sfaces; f != NIL; f = f->nextf)
X                faceeq(f->flout, f->feq);
X        getmaxnames(A);
X        updmaxnames(B);
X#ifdef TESTALL
Xsolidls(A, 2);
Xsolidls(B, 2);
X#endif
X    Gtestspecials = 1;
X        setopgenerate(A, B);
X    Gtestspecials = 0;
X#ifdef TESTALL
Xsolidls(A, 2);
Xsolidls(B, 2);
X#endif
X        setopclassify(op);
X        if(nedga == 0)
X        {
X                printf("setop: no intersections found\n");
X                return(0);
X        }
X#ifdef TESTALL
Xsolidls(A, 2);
Xsolidls(B, 2);
X#endif
X#ifdef ECHO
X{
Xint i;
Xprintf("Set of null edges\n");
Xfor(i=0; i<nedga; i++)
Xprintf("(%d,%d) (%d,%d)\n",
Xsonea[i]->he1->vtx->vertexno, sonea[i]->he2->vtx->vertexno,
Xsoneb[i]->he1->vtx->vertexno, soneb[i]->he2->vtx->vertexno);
X}
X#endif
X        setopconnect();
X#ifdef TESTALL
Xsolidls(A, 2);
Xsolidls(B, 2);
X#endif
X#ifdef ECHO
X{
X  int i;
X  printf("Set of null faces\n");
X  for(i=0; i<nfaca; i++)
X  {
X    facels(sonfa[i]);
X    facels(sonfb[i]);
X  }
X}
X#endif
X        setopfinish(A, B, res, op);
X    return(1);
X}
*EOF
if [ `wc -c <gwb/setop/setop.c` -ne    1928 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/setop.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/setop.h"
sed -e 's/^X//' <<\*EOF > gwb/setop/setop.h
X# include "gwb.h"
X
X# define UNION 0
X# define INTERSECT 1
X# define DIFFERENCE 2
X
X# define MAXVV  1000
X# define MAXVF  1000
X# define MAXNE  1000
X# define MAXNF  20
X
Xstruct
X{
X        Vertex  *va, *vb;
X}              sonvv[MAXVV];
Xint     nvtx;
Xstruct
X{
X        Vertex *v;
X        Face   *f;
X}              sonva[MAXVF], sonvb[MAXVF];
Xint     nvtxa, nvtxb;
XEdge    *sonea[MAXNE], *soneb[MAXNE];
Xint     nedga, nedgb;
XFace    *sonfa[MAXNF], *sonfb[MAXNF];
Xint     nfaca, nfacb;
X
Xvoid           addsovf();
Xvoid           addsovv();
Xvoid           process_edge();
*EOF
if [ `wc -c <gwb/setop/setop.h` -ne     557 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/setop.h"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/setopcl.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/setopcl.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "setop.h"
X
Xvoid    setopclassify(op)
Xint     op;
X{
X        int     i;
X
X        nedga = nedgb = 0;
X    for(i=0; i<nvtxa; i++)
X                vtxfacclassify(sonva[i].v, sonva[i].f, op, 0);
X    for(i=0; i<nvtxb; i++)
X                vtxfacclassify(sonvb[i].v, sonvb[i].f, op, 1);
X    for(i=0; i<nvtx; i++)
X                vtxvtxclassify(sonvv[i].va, sonvv[i].vb, op);
X}
*EOF
if [ `wc -c <gwb/setop/setopcl.c` -ne    1018 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/setopcl.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/setopconnect.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/setopconnect.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "setop.h"
X
Xvoid    cuta(), cutb();
X
Xvoid    setopconnect()
X{
X        Edge            *nextedgea, *nextedgeb;
X        HalfEdge        *h1a, *h2a, *h1b, *h2b;
X
X        nfaca = nfacb = 0;
X        ssortnulledges();
X        while(sgetnextnulledge(&nextedgea, &nextedgeb))
X        {
X                if(scanjoin(nextedgea->he1, nextedgeb->he2, &h1a, &h2b))
X                {
X                        join(h1a, nextedgea->he1);
X                        if(!isloosea(mate(h1a)))
X                                cuta(h1a);
X                        join(h2b, nextedgeb->he2);
X                        if(!islooseb(mate(h2b)))
X                                cutb(h2b);
X                }
X                if(scanjoin(nextedgea->he2, nextedgeb->he1, &h2a, &h1b))
X                {
X                        join(h2a, nextedgea->he2);
X                        if(!isloosea(mate(h2a)))
X                                cuta(h2a);
X                        join(h1b, nextedgeb->he1);
X                        if(!islooseb(mate(h1b)))
X                                cutb(h1b);
X                }
X                if(h1a && h1b && h2a && h2b)
X                {
X                        cuta(nextedgea->he1);
X                        cutb(nextedgeb->he1);
X                }
X        }
X}
X
Xstatic HalfEdge *endsa[30];
Xstatic HalfEdge *endsb[30];
Xstatic int      nenda;
Xstatic int      nendb;
X
Xint             scanjoin(hea, heb, reta, retb)
XHalfEdge        *hea, *heb, **reta, **retb;
X{
X        int             i, j;
X
X#ifdef TEST
Xprintf("scanjoin: (%d,%d) (%d,%d)\n",
Xhea->vtx->vertexno, hea->nxt->vtx->vertexno,
Xheb->vtx->vertexno, heb->nxt->vtx->vertexno);
X#endif
X        for(i = 0; i<nenda; i++)
X        {
X#ifdef TEST
Xprintf("vs. (%d,%d) (%d,%d): %d %d\n",
Xendsa[i]->vtx->vertexno, endsa[i]->nxt->vtx->vertexno,
Xendsb[i]->vtx->vertexno, endsb[i]->nxt->vtx->vertexno,
Xneighbor(hea, endsa[i]), neighbor(heb, endsb[i]));
X#endif
X                if(neighbor(hea, endsa[i]) && neighbor(heb, endsb[i]))
X                {
X                        *reta = endsa[i];
X                        *retb = endsb[i];
X                        for(j=i+1; j<nenda; j++)
X                        {
X                                endsa[j-1] = endsa[j];
X                                endsb[j-1] = endsb[j];
X                        }
X                        nenda--;
X                        nendb--;
X                        return(1);
X                }
X        }
X        endsa[nenda++] = hea;
X        endsb[nendb++] = heb;
X        *reta = NIL;
X        *retb = NIL;
X        return(0);
X}
X
Xint             isloosea(he)
XHalfEdge        *he;
X{
X        register int    i;
X
X        for(i=0; i<nenda; i++)
X               if(endsa[i] == he)
X                       return(1);
X        return(0);
X}
X
Xint             islooseb(he)
XHalfEdge        *he;
X{
X        register int    i;
X
X        for(i=0; i<nendb; i++)
X               if(endsb[i] == he)
X                       return(1);
X        return(0);
X}
X
Xvoid            cuta(he)
XHalfEdge        *he;
X{
X        if(he->edg->he1->wloop == he->edg->he2->wloop)
X        {
X                sonfa[nfaca++] = he->wloop->lface;
X                lkemr(he->edg->he2, he->edg->he1);
X        }
X        else    lkef(he->edg->he1, he->edg->he2);
X}
X
Xvoid            cutb(he)
XHalfEdge        *he;
X{
X        if(he->edg->he1->wloop == he->edg->he2->wloop)
X        {
X                sonfb[nfacb++] = he->wloop->lface;
X                lkemr(he->edg->he2, he->edg->he1);
X        }
X        else    lkef(he->edg->he1, he->edg->he2);
X}
*EOF
if [ `wc -c <gwb/setop/setopconnect.c` -ne    4134 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/setopconnect.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/setopfinish.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/setopfinish.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "setop.h"
X# define ECHO 1
X# define RESULT 1
X
Xvoid    setopfinish(a, b, res, op)
XSolid   *a, *b, **res;
Xint     op;
X{
X        int             i, j;
X        Face            *f;
X        Solid           *bina;
X
X#ifdef ECHO
Xprintf("Enter setop_finish()\n");
X#endif
X
X        /* step 6: modify null faces into pairs of null faces */
X        for(i=0; i<nfaca; i++)
X        {
X                /* save the new faces */
X                sonfa[nfaca+i] =
X                        lmfkrh(sonfa[i]->floops->nextl, ++maxf);
X                sonfb[nfacb+i] =
X                        lmfkrh(sonfb[i]->floops->nextl, ++maxf);
X        }
X
X#ifdef ECHO
Xprintf("step 6:\n");
X#endif
X#ifdef TEST5
Xsolidls(a, 0);
Xsolidls(b, 0);
Xprintf("null faces (out)\n");
Xfor(i=0; i<nfaca; i++)
X{
X        facels(sonfa[i], 0);
X        facels(sonfb[i], 0);
X}
Xprintf("null faces (in)\n");
Xfor(i=0; i<nfaca; i++)
X{
X        facels(sonfa[nfaca+i], 0);
X        facels(sonfb[nfaca+i], 0);
X}
X#endif
X
X        /* step 8: construct the desired result */
X
X#ifdef OLDSETOP
X        *res = (Solid *) new(NIL, SOLID);
X#else
X        *res = (Solid *) new(SOLID, NIL);
X#endif
X        switch(op)
X        {
X                case UNION:
X                          for(i=0; i<nfaca; i++)
X                          {
X                                  movefac(sonfa[i], *res);
X                                  movefac(sonfb[i], *res);
X#ifdef ECHO
Xprintf("intersection polygon %d\n", i);
X#endif
X                          }
X                          cleanup(*res);
X#ifdef ECHO
Xprintf("step 8:\n");
X#endif
X#ifdef TEST6
Xsolidls(*res, 0);
X#endif
X                          /* glue null faces */
X                          for(i=0; i<nfaca; i++)
X                          {
X                                  lkfmrh(sonfa[i], sonfb[i]);
X                                  loopglue(sonfa[i]);
X                          }
X                          break;
X
X                  case INTERSECT:
X                          for(i=0; i<nfaca; i++)
X                          {
X                                  movefac(sonfa[i+nfaca], *res);
X                                  movefac(sonfb[i+nfacb], *res);
X#ifdef ECHO
Xprintf("intersection polygon %d\n", i);
X#endif
X                          }
X                          cleanup(*res);
X#ifdef ECHO
Xprintf("step 8:\n");
X#endif
X#ifdef TEST6
Xsolidls(*res, 0);
X#endif
X                          for(i=0; i<nfaca; i++)
X                          {
X                                  lkfmrh(sonfa[nfaca+i], sonfb[nfaca+i]);
X                                  loopglue(sonfa[nfaca+i]);
X                          }
X                          break;
X
X                  case DIFFERENCE:
X                          /* create temporary solid */
X#ifdef OLDSETOP
X              bina = (Solid *) new(NIL, SOLID);
X#else
X              bina = (Solid *) new(SOLID, NIL);
X#endif
X                          for(i=0; i<nfaca; i++)
X                          {
X                                  movefac(sonfa[i], *res);
X                                  movefac(sonfb[i+nfacb], bina);
X#ifdef ECHO
Xprintf("intersection polygon %d\n", i);
X#endif
X                          }
X                          /* revert the topology of bina */
X                          revert(bina);
X                          merge2(*res, bina);
X                          cleanup(*res);
X#ifdef ECHO
Xprintf("step 8:\n");
X#endif
X#ifdef TEST6
Xsolidls(*res, 0);
X#endif
X                          /* glue null faces */
X                          for(i=0; i<nfaca; i++)
X                          {
X                                  lkfmrh(sonfa[i], sonfb[nfaca+i]);
X                                  loopglue(sonfa[i]);
X                          }
X                          break;
X        }
X
X#ifdef ECHO
X#ifdef RESULT
Xprintf("result of ");
Xif(op == DIFFERENCE) printf("DIFFERENCE:\n");
Xif(op == INTERSECT) printf("INTERSECT:\n");
Xif(op == UNION) printf("UNION:\n");
Xsolidls(*res, 2);
X#endif
Xprintf("exit setop_finish\n");
X#endif
X}
*EOF
if [ `wc -c <gwb/setop/setopfinish.c` -ne    4569 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/setopfinish.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/setopgen.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/setopgen.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "setop.h"
X
Xvoid      setopgenerate(A, B)
XSolid     *A, *B;
X{
X     Edge      *e;
X
X     nvtx = nvtxa = nvtxb = 0;
X     for(e = A->sedges; e != NIL; e = e->nexte)
X          process_edge(e, B, 0);
X     for(e = B->sedges; e != NIL; e = e->nexte)
X          process_edge(e, A, 1);
X}
X
Xvoid      process_edge(e, s, BvsA)
XEdge      *e;
XSolid     *s;
Xint       BvsA;
X{
X     Face      *f;
X
X     for(f = s->sfaces; f != NIL; f = f->nextf)
X          dosetopgenerate(e, f, BvsA);
X}
*EOF
if [ `wc -c <gwb/setop/setopgen.c` -ne    1117 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/setopgen.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/setopgetnbr.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/setopgetnbr.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "setop.h"
X
X# define MAXSECTORS 100
X
X/*
X# define OUT 1
X# define IN -1
X# define ON 0
X*/
X# define OUT -1
X# define IN 1
X# define ON 0
X
Xextern struct nb
X{
X    HalfEdge    *he;
X    vector        ref1;
X    vector        ref2;
X    vector        ref12;
X} nba[MAXSECTORS], nbb[MAXSECTORS];
Xextern int    nnba, nnbb;
X
Xextern struct
X{
X        int        secta, sectb;
X    int             s1a, s2a;
X    int             s1b, s2b;
X    int             intersect;
X}       sectors[MAXSECTORS];
Xextern int    nsectors;
X
Xvoid      setopgetneighborhood(va, vb)
XVertex    *va, *vb;
X{
X     HalfEdge   *ha, *hb;
X     double     d1, d2, d3, d4;
X     int        na, nb, i, j;
X
X     nnba = nbr_preproc(va, nba);
X     nnbb = nbr_preproc(vb, nbb);
X     nsectors = 0;
X     for(i=0; i<nnba; i++)
X     {
X          for(j=0; j<nnbb; j++)
X          {
X               if(sectortest(i, j))
X               {
X                    ha = nba[i].he;
X                    hb = nbb[j].he;
X            d1 = dot(hb->wloop->lface->feq, nba[i].ref1);
X                    d2 = dot(hb->wloop->lface->feq, nba[i].ref2);
X                    d3 = dot(ha->wloop->lface->feq, nbb[j].ref1);
X                    d4 = dot(ha->wloop->lface->feq, nbb[j].ref2);
X                    sectors[nsectors].secta = i;
X                    sectors[nsectors].sectb = j;
X                    sectors[nsectors].s1a = comp(d1, 0.0, EPS);
X                    sectors[nsectors].s2a = comp(d2, 0.0, EPS);
X                    sectors[nsectors].s1b = comp(d3, 0.0, EPS);
X                    sectors[nsectors].s2b = comp(d4, 0.0, EPS);
X                    sectors[nsectors++].intersect = 1;
X                }
X           }
X     }
X}
X
Xint               nbr_preproc(v, n)
XVertex            *v;
Xstruct nb         n[];
X{
X     vector       bisec;
X     HalfEdge     *he;
X     int          i;
X
X     i = 0;
X     he = v->vedge;
X     do
X     {
X          n[i].he = he;
X      vecminus(n[i].ref1, he->prv->vtx->vcoord, he->vtx->vcoord);
X          vecminus(n[i].ref2, he->nxt->vtx->vcoord, he->vtx->vcoord);
X          cross(n[i].ref12, n[i].ref1, n[i].ref2);
X          /* check for "wide" sectors */
X      if(vecnull(n[i].ref12, EPS) ||
X         (dot(n[i].ref12, he->wloop->lface->feq) > 0.0))
X      {
X           /* wide sector! subdivide it into two non-wide ones */
X
X           /* form the bisector of the wide sector */
X           if(vecnull(n[i].ref12, EPS))
X                inside(he, bisec);
X           else
X           {
X                vecplus(bisec, n[i].ref1, n[i].ref2);
X            bisec[0] = -bisec[0];
X            bisec[1] = -bisec[1];
X            bisec[2] = -bisec[2];
X           }
X
X           /* store the two small sectors ref1-bisec and bisec-ref2 */
X               n[i+1].he = he;
X           veccopy(n[i+1].ref2, n[i].ref2);
X           veccopy(n[i+1].ref1, bisec);
X           veccopy(n[i].ref2, bisec);
X           cross(n[i].ref12, n[i].ref1, n[i].ref2);
X               cross(n[i+1].ref12, n[i+1].ref1, n[i+1].ref2);
X           i++;
X      }
X      i++;
X     }
X     while((he = mate(he)->nxt) != v->vedge);
X
X     return(i);
X}
*EOF
if [ `wc -c <gwb/setop/setopgetnbr.c` -ne    3691 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/setopgetnbr.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/sinsert.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/sinsert.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "setop.h"
X
X# define MAXSECTORS 100
X
X/*
X# define OUT 1
X# define IN -1
X# define ON 0
X*/
X# define OUT -1
X# define IN 1
X# define ON 0
X
Xextern struct nb
X{
X    HalfEdge    *he;
X    vector        ref1;
X    vector        ref2;
X    vector        ref12;
X} nba[MAXSECTORS], nbb[MAXSECTORS];
Xextern int    nnba, nnbb;
X
Xextern struct
X{
X        int        secta, sectb;
X    int             s1a, s2a;
X    int             s1b, s2b;
X    int             intersect;
X}       sectors[MAXSECTORS];
Xextern int    nsectors;
X
Xvoid    sinsertnulledges()
X{
X    HalfEdge    *ha1, *ha2, *hb1, *hb2;
X    int         i = 0;
X
X    while(1)
X    {
X        while(sectors[i].intersect == 0)
X            if(++i == nsectors) return;
X        if(sectors[i].s1a == OUT)
X                ha1 = nba[sectors[i].secta].he;
X    else    ha2 = nba[sectors[i].secta].he;
X        if(sectors[i].s1b == IN)
X                hb1 = nbb[sectors[i++].sectb].he;
X    else    hb2 = nbb[sectors[i++].sectb].he;
X
X        while(sectors[i].intersect == 0)
X            if(++i == nsectors) return;
X        if(sectors[i].s1a == OUT)
X                ha1 = nba[sectors[i].secta].he;
X    else    ha2 = nba[sectors[i].secta].he;
X        if(sectors[i].s1b == IN)
X                hb1 = nbb[sectors[i++].sectb].he;
X    else    hb2 = nbb[sectors[i++].sectb].he;
X
X        if(ha1 == ha2)
X        {
X            separ2(ha1, 0, getorient(ha1, hb1, hb2));
X            separ1(hb1, hb2, 1);
X        }
X        else if(hb1 == hb2)
X        {
X            separ2(hb1, 1, getorient(hb1, ha2, ha1));
X            separ1(ha2, ha1, 0);
X        }
X        else
X        {
X            separ1(ha2, ha1, 0);
X            separ1(hb1, hb2, 1);
X        }
X        if(i == nsectors) return;
X    }
X}
X
Xint             getorient(ref, he1, he2)
XHalfEdge        *ref, *he1, *he2;
X{
X        HalfEdge        *mhe1, *mhe2;
X        int             retcode;
X
X        mhe1 = mate(he1)->nxt;
X        mhe2 = mate(he2)->nxt;
X        if(mhe1 != he2 && mhe2 == he1)
X                retcode = convexedg(he2);
X        else    retcode = convexedg(he1);
X        if(sectorwide(mhe1, 0) == 1 && sectorwide(ref, 0) == 1)
X                retcode = 1-retcode;
X        return(1-retcode);
X}
X
Xint              convexedg(he)
XHalfEdge         *he;
X{
X        HalfEdge        *h2;
X        vector          dir, cr;
X
X        h2 = he->nxt;
X        if(nulledge(he)) h2 = h2->nxt;
X        vecminus(dir, h2->vtx->vcoord, he->vtx->vcoord);
X        cross(cr, he->wloop->lface->feq, mate(he)->wloop->lface->feq);
X        if(vecnull(cr, EPS)) return(1);
X        return(dot(dir, cr) < 0.0);
X}
X
Xvector       ref1[2], ref2[2], ref12[2];
X
Xint          sectorwide(he, ind)
XHalfEdge     *he;
Xint          ind;
X{
X      vecminus(ref1[ind], he->prv->vtx->vcoord, he->vtx->vcoord);
X      vecminus(ref2[ind], he->nxt->vtx->vcoord, he->vtx->vcoord);
X      cross(ref12[ind], ref1[ind], ref2[ind]);
X      if(vecnull(ref12[ind], EPS)) return(1);
X      return((dot(ref12[ind], he->wloop->lface->feq) > 0.0) ? 0 : 1 /*1 : 0*/);
X}
*EOF
if [ `wc -c <gwb/setop/sinsert.c` -ne    3615 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/sinsert.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/srecledges.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/srecledges.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "setop.h"
X
X# define MAXSECTORS 100
X
X/*
X# define OUT 1
X# define IN -1
X# define ON 0
X*/
X# define OUT -1
X# define IN 1
X# define ON 0
X
Xextern struct nb
X{
X    HalfEdge      *he;
X    vector        ref1;
X    vector        ref2;
X    vector        ref12;
X}                 nba[MAXSECTORS], nbb[MAXSECTORS];
Xextern int        nnba, nnbb;
X
Xextern struct
X{
X    int           secta, sectb;
X    int           s1a, s2a;
X    int           s1b, s2b;
X    int           intersect;
X}                 sectors[MAXSECTORS];
Xextern int        nsectors;
X
Xvoid    srecledges(op)
Xint     op;
X{
X    int         i, j, newsa, newsb;
X    int         secta, prevsecta;
X    int         sectb, prevsectb;
X
X    /* search for doubly coplanar edges */
X    for(i=0; i<nsectors; i++)
X    {
X        /* double "on"-edge ? */
X        if(sectors[i].intersect &&
X           sectors[i].s1a == ON && sectors[i].s1b == ON)
X        {
X            /* figure out the new classifications
X               for the "on"-edges */
X            newsa = (op == UNION) ? OUT : IN;
X            newsb = (op == UNION) ? IN : OUT;
X
X            secta = sectors[i].secta;
X            sectb = sectors[i].sectb;
X            prevsecta = (secta == 0) ? nnba-1 : secta-1;
X            prevsectb = (sectb == 0) ? nnbb-1 : sectb-1;
X
X            /* reclassify all instances of the situation */
X            for(j=0; j<nsectors; j++)
X            {
X                if(sectors[j].intersect)
X                {
X                    if((sectors[j].secta == secta) &&
X                       (sectors[j].sectb == sectb))
X                    {
X                        sectors[j].s1a = newsa;
X                        sectors[j].s1b = newsb;
X                    }
X
X                    if((sectors[j].secta == prevsecta) &&
X                       (sectors[j].sectb == sectb))
X                    {
X                        sectors[j].s2a = newsa;
X                        sectors[j].s1b = newsb;
X                    }
X
X                    if((sectors[j].secta == secta) &&
X                       (sectors[j].sectb == prevsectb))
X                    {
X                        sectors[j].s1a = newsa;
X                        sectors[j].s2b = newsb;
X                    }
X
X                    if((sectors[j].secta == prevsecta) &&
X                       (sectors[j].sectb == prevsectb))
X                    {
X                        sectors[j].s2a = newsa;
X                        sectors[j].s2b = newsb;
X                    }
X
X                    if(sectors[j].s1a == sectors[j].s2a &&
X                       (sectors[j].s1a == IN ||
X                        sectors[j].s1a == OUT))
X                        sectors[j].intersect = 0;
X                    if(sectors[j].s1b == sectors[j].s2b &&
X                       (sectors[j].s1b == IN ||
X                        sectors[j].s1b == OUT))
X                        sectors[j].intersect = 0;
X                }
X            }
X        }
X    }
X
X    /* search for singly coplanar edges */
X    for(i=0; i<nsectors; i++)
X    {
X        if(sectors[i].intersect && sectors[i].s1a == ON)
X        {
X            secta = sectors[i].secta;
X            sectb = sectors[i].sectb;
X            prevsecta = (secta == 0) ? nnba-1 : secta-1;
X            prevsectb = (sectb == 0) ? nnbb-1 : sectb-1;
X            newsa = (op == UNION) ? OUT : IN;
X
X            for(j=0; j<nsectors; j++)
X            {
X                if(sectors[j].intersect)
X                {
X                    if((sectors[j].secta == secta) &&
X                       (sectors[j].sectb == sectb))
X                        sectors[j].s1a = newsa;
X
X                    if((sectors[j].secta == prevsecta) &&
X                       (sectors[j].sectb == sectb))
X                        sectors[j].s2a = newsa;
X
X                    if(sectors[j].s1a == sectors[j].s2a &&
X                       (sectors[j].s1a == IN ||
X                        sectors[j].s1a == OUT))
X                        sectors[j].intersect = 0;
X                }
X            }
X        }
X        else if(sectors[i].intersect && sectors[i].s1b == ON)
X        {
X            secta = sectors[i].secta;
X            sectb = sectors[i].sectb;
X            prevsecta = (secta == 0) ? nnba-1 : secta-1;
X            prevsectb = (sectb == 0) ? nnbb-1 : sectb-1;
X            newsb = (op == UNION) ? OUT : IN;
X
X            for(j=0; j<nsectors; j++)
X            {
X                if(sectors[j].intersect)
X                {
X                    if((sectors[j].secta == secta) &&
X                       (sectors[j].sectb == sectb))
X                        sectors[j].s1b = newsb;
X
X                    if((sectors[j].secta == secta) &&
X                       (sectors[j].sectb == prevsectb))
X                        sectors[j].s2b = newsb;
X
X                    if(sectors[j].s1b == sectors[j].s2b &&
X                       (sectors[j].s1b == IN ||
X                        sectors[j].s1b == OUT))
X                        sectors[j].intersect = 0;
X                }
X            }
X        }
X    }
X}
*EOF
if [ `wc -c <gwb/setop/srecledges.c` -ne    5585 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/srecledges.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/sreclsectors.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/sreclsectors.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "setop.h"
X
X# define MAXSECTORS 100
X
X/*
X# define OUT 1
X# define IN -1
X# define ON 0
X*/
X# define OUT -1
X# define IN 1
X# define ON 0
X
Xextern struct nb
X{
X    HalfEdge    *he;
X    vector        ref1;
X    vector        ref2;
X    vector        ref12;
X} nba[MAXSECTORS], nbb[MAXSECTORS];
Xextern int    nnba, nnbb;
X
Xextern struct
X{
X        int        secta, sectb;
X    int             s1a, s2a;
X    int             s1b, s2b;
X    int             intersect;
X}       sectors[MAXSECTORS];
Xextern int    nsectors;
X
Xvoid    sreclsectors(op)
Xint     op;
X{
X        HalfEdge        *ha, *hb;
X    int             i, j, nonopposite, newsa, newsb;
X        int             secta, prevsecta, nextsecta;
X        int             sectb, prevsectb, nextsectb;
X
X        /* search for coplanar sectors */
X        for(i=0; i<nsectors; i++)
X        {
X                if(sectors[i].s1a == ON && sectors[i].s2a == ON &&
X                   sectors[i].s1b == ON && sectors[i].s2b == ON)
X                {
X                        secta = sectors[i].secta;
X                    sectb = sectors[i].sectb;
X                prevsecta = (secta == 0) ? nnba-1 : secta-1;
X                prevsectb = (sectb == 0) ? nnbb-1 : sectb-1;
X                nextsecta = (secta == nnba-1) ? 0 : secta+1;
X                nextsectb = (sectb == nnbb-1) ? 0 : sectb+1;
X
X                        /* apply reclassification rules (Table 15.1) */
X                        ha = nba[secta].he;
X                        hb = nbb[sectb].he;
X                        nonopposite = vecequal(ha->wloop->lface->feq,
X                                               hb->wloop->lface->feq, EPS);
X                        if(nonopposite)
X                        {
X                                newsa = (op == UNION) ? OUT : IN;
X                                newsb = (op == UNION) ? IN : OUT;
X                        }
X                        else
X                        {
X                                newsa = (op == UNION) ? IN : OUT;
X                                newsb = (op == UNION) ? IN : OUT;
X                        }
X                        /* reclassify intersecting neighbors */
X                        for(j=0; j<nsectors; j++)
X                        {
X                            if((sectors[j].secta == prevsecta) &&
X                          (sectors[j].sectb == sectb))
X                    if(sectors[j].s1a != ON)
X                                            sectors[j].s2a = newsa;
X
X                            if((sectors[j].secta == nextsecta) &&
X                          (sectors[j].sectb == sectb))
X                    if(sectors[j].s2a != ON)
X                                            sectors[j].s1a = newsa;
X
X                            if((sectors[j].secta == secta) &&
X                          (sectors[j].sectb == prevsectb))
X                    if(sectors[j].s1b != ON)
X                                            sectors[j].s2b = newsb;
X
X                            if((sectors[j].secta == secta) &&
X                          (sectors[j].sectb == nextsectb))
X                    if(sectors[j].s2b != ON)
X                                            sectors[j].s1b = newsb;
X
X                                if(sectors[j].s1a == sectors[j].s2a &&
X                                   (sectors[j].s1a == IN ||
X                                    sectors[j].s1a == OUT))
X                                        sectors[j].intersect = 0;
X
X                                if(sectors[j].s1b == sectors[j].s2b &&
X                                   (sectors[j].s1b == IN ||
X                                    sectors[j].s1b == OUT))
X                                        sectors[j].intersect = 0;
X                        }
X                        /* reclassify coplanar sectors themselves */
X                        sectors[i].s1a = sectors[i].s2a = newsa;
X                        sectors[i].s1b = sectors[i].s2b = newsb;
X                        sectors[i].intersect = 0;
X                }
X        }
X}
*EOF
if [ `wc -c <gwb/setop/sreclsectors.c` -ne    4604 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/sreclsectors.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/ssortedges.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/ssortedges.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "setop.h"
X
Xvoid    ssortnulledges()
X{
X    register int        i, j;
X
X    if(nedga < 5) return;
X    for(i=0; i<nedga; i++)
X            for(j=i+1; j<nedga; j++)
X                  if(sgreater(i, j)) sswap(i, j);
X}
Xint    sgreater(i, j)
Xint    i, j;
X{
X    register Vertex        *v1, *v2;
X    register int        com;
X
X    v1 = sonea[i]->he1->vtx;
X    v2 = sonea[j]->he1->vtx;
X    if((com = comp(v1->vcoord[0], v2->vcoord[0], BIGEPS)) == -1) return(0);
X    else if(com == 0)
X    {
X        if((com = comp(v1->vcoord[1], v2->vcoord[1], BIGEPS)) == -1)
X            return(0);
X        else if(com == 0)
X        {
X            if((com = comp(v1->vcoord[2], v2->vcoord[2], BIGEPS))
X                == -1) return(0);
X        }
X    }
X    return(1);
X}
Xint    sswap(i, j)
Xint    i, j;
X{
X    register Edge *temp;
X
X    temp = sonea[i];
X    sonea[i] = sonea[j];
X    sonea[j] = temp;
X    temp = soneb[i];
X    soneb[i] = soneb[j];
X    soneb[j] = temp;
X}
X
Xint     sgetnextnulledge(ea, eb)
XEdge    **ea, **eb;
X{
X    static int n = 0;
X
X    if(n == nedga)
X    {
X           n = 0;
X           return(0);
X    }
X    *ea = sonea[n];
X    *eb = soneb[n++];
X    return(1);
X}
*EOF
if [ `wc -c <gwb/setop/ssortedges.c` -ne    1793 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/ssortedges.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/testsetop.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/testsetop.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "../gwb.h"
X
Xmain()
X{
X    Solid *A, *B, *res;
X
X    A = block(10.0, 15.0, 20.0);
X    B = block(5.0, 5.0, 10.0);
X    setop(A, B, &res, 2);
X}
*EOF
if [ `wc -c <gwb/setop/testsetop.c` -ne     788 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/testsetop.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/updmaxnames.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/updmaxnames.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid    updmaxnames(s)
XSolid   *s;
X{
X        int     oldmaxv, oldmaxf;
X    Vertex  *v;
X        Face    *f;
X
X    oldmaxv = maxv;
X    oldmaxf = maxf;
X        for(v = s->sverts; v != NIL; v = v->nextv)
X        {
X                v->vertexno += oldmaxv;
X                if(v->vertexno > maxv) maxv = v->vertexno;
X        }
X        for(f = s->sfaces; f != NIL; f = f->nextf)
X        {
X                f->faceno += oldmaxf;
X                if(f->faceno > maxf) maxf = f->faceno;
X        }
X}
*EOF
if [ `wc -c <gwb/setop/updmaxnames.c` -ne    1143 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/updmaxnames.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/vtxfaccl.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/vtxfaccl.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "setop.h"
X# define TEST 1
X
X/*
X# define OUT 1
X# define IN -1
X# define ON 0
X*/
X# define OUT -1
X# define IN 1
X# define ON 0
X
X# define MAXEDGESFORVERTEX 20
X
Xextern struct
X{
X        HalfEdge        *sector;
X        int             cl;
X}       nbr[MAXEDGESFORVERTEX];
Xextern int     nnbr;
X
Xvoid    s_reclassifyonsectors();
Xvoid    s_recledges();
Xvoid    s_insertnulledges();
X
Xvoid    vtxfacclassify(v, f, op, BvsA)
XVertex  *v;
XFace    *f;
Xint     op;
Xint     BvsA;
X{
X#ifdef TEST
Xprintf("vtxfaccl: classify vertex %d\n", v->vertexno);
X#endif
X        getneighborhood(v, f->feq);
X#ifdef TEST
Xprintneighborhood();
X#endif
X        s_reclassifyonsectors(f->feq, op, BvsA);
X#ifdef TEST
Xprintneighborhood();
X#endif
X        s_recledges();
X#ifdef TEST
Xprintneighborhood();
X#endif
X        s_insertnulledges(f, BvsA);
X}
X
X#ifdef TEST
Xprintneighborhood()
X{
X        int i;
X
X        printf("neighborhood:\n");
X    for(i=0; i<nnbr; i++)
X    {
X            printf("  neighbor vtx %d, class = ",
X               nbr[i].sector->nxt->vtx->vertexno);
X        if(nbr[i].cl == IN) printf("IN\n");
X        if(nbr[i].cl == ON) printf("ON\n");
X        if(nbr[i].cl == OUT) printf("OUT\n");
X        }
X}
X#endif
X
Xvoid    s_reclassifyonsectors(SP, op, BvsA)
Xvector  SP;
Xint     op, BvsA;
X{
X        Face            *f;
X        vector          c;
X        double          d;
X        int             i;
X
X        for(i=0; i<nnbr; i++)
X        {
X        /* test coplanarity */
X                f = mate(nbr[i].sector)->wloop->lface;
X                cross(c, f->feq, SP);
X                d = dot(c, c);
X                if(comp(d, 0.0, EPS*EPS) == 0)
X                {
X                        d = dot(f->feq, SP);
X            /* test orientation */
X                        if(comp(d, 0.0, EPS) == 1)
X                        {
X                /* identical */
X                if(BvsA)
X                {
X                    nbr[i].cl = (op == UNION) ? IN : OUT;
X                    nbr[(i+1)%nnbr].cl =
X                        (op == UNION) ? IN : OUT;
X                }
X                else
X                {
X                    nbr[i].cl = (op == UNION) ? OUT : IN;
X                    nbr[(i+1)%nnbr].cl =
X                        (op == UNION) ? OUT : IN;
X                }
X                        }
X                        else
X                        {
X                /* opposite */
X                if(BvsA)
X                {
X                    nbr[i].cl = (op == UNION) ? IN : OUT;
X                    nbr[(i+1)%nnbr].cl =
X                        (op == UNION) ? IN : OUT;
X                }
X                else
X                {
X                    nbr[i].cl = (op == UNION) ? IN : OUT;
X                    nbr[(i+1)%nnbr].cl =
X                        (op == UNION) ? IN : OUT;
X                   }
X                        }
X                }
X        }
X}
X
Xvoid    s_recledges()
X{
X        int             i;
X
X        for(i=0; i<nnbr; i++)
X        {
X                if(nbr[i].cl == ON)
X                {
X                        if(nbr[(nnbr+i-1)%nnbr].cl == IN)
X                        {
X                                if(nbr[(i+1)%nnbr].cl == IN)
X                                        nbr[i].cl = IN;
X                                else    nbr[i].cl = IN;
X                        }
X            else    /* OUT */
X                        {
X                                if(nbr[(i+1)%nnbr].cl == IN)
X                                        nbr[i].cl = IN;
X                                else    nbr[i].cl = OUT;
X            }
X                }
X        }
X}
X
Xvoid    s_insertnulledges(f, BvsA)
XFace    *f;
Xint     BvsA;
X{
X        int             start, i;
X        HalfEdge        *head, *tail;
X
X        i = 0;
X        while(!(nbr[i].cl == IN && nbr[(i+1)%nnbr].cl == OUT))
X                if(++i == nnbr) return;
X        start = i;
X        head = mate(nbr[i].sector)->nxt;
X        while(1)
X        {
X                while(!(nbr[i].cl == OUT && nbr[(i+1)%nnbr].cl == IN))
X                        i = (i+1) % nnbr;
X                tail = mate(nbr[i].sector)->nxt;
X#ifdef TEST
Xprintf("insertnulledges: insert from (%d %d) to (%d %d)\n",
Xhead->vtx->vertexno, head->nxt->vtx->vertexno,
Xtail->vtx->vertexno, tail->nxt->vtx->vertexno);
X#endif
X                lmev(head, tail, ++maxv,
X                        head->vtx->vcoord[0],
X                        head->vtx->vcoord[1],
X                        head->vtx->vcoord[2]);
X                if(BvsA) soneb[nedgb++] = head->prv->edg;
X                else sonea[nedga++] = head->prv->edg;
X        makering(f,
X                        head->vtx->vcoord[0],
X                        head->vtx->vcoord[1],
X                        head->vtx->vcoord[2],
X                BvsA);
X
X                while(!(nbr[i].cl == IN && nbr[(i+1)%nnbr].cl == OUT))
X                {
X                        i = (i+1) % nnbr;
X                        if(i == start) return;
X                }
X        }
X}
*EOF
if [ `wc -c <gwb/setop/vtxfaccl.c` -ne    5526 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/vtxfaccl.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/setop ]
then
echo "Making directory ./gwb/setop"
mkdir ./gwb/setop
fi
echo "extracting file gwb/setop/vtxvtxcl.c"
sed -e 's/^X//' <<\*EOF > gwb/setop/vtxvtxcl.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "setop.h"
X
X# define MAXSECTORS 100
X
X/*
X# define OUT 1
X# define IN -1
X# define ON 0
X*/
X# define OUT -1
X# define IN 1
X# define ON 0
X
X/* storage for preprocessed vertex neighborhoods */
Xstruct nb
X{
X    HalfEdge    *he;
X    vector        ref1;
X    vector        ref2;
X    vector        ref12;
X} nba[MAXSECTORS], nbb[MAXSECTORS];
Xint    nnba, nnbb;
X
Xstruct
X{
X        int        secta, sectb;
X    int             s1a, s2a;
X    int             s1b, s2b;
X    int             intersect;
X}       sectors[MAXSECTORS];
Xint    nsectors;
X
Xvoid    vtxvtxclassify(va, vb, op)
XVertex  *va, *vb;
Xint     op;
X{
X        setopgetneighborhood(va, vb);
Xsetopprintneighborhood(va, vb);
X    sreclsectors(op);
Xsetopprintneighborhood(va, vb);
X        srecledges(op);
Xsetopprintneighborhood(va, vb);
X    sinsertnulledges();
X}
X
Xsetopprintneighborhood(va, vb)
XVertex  *va, *vb;
X{
X    int    i, secta, sectb;
X
X    printf("vertex neighborhood info of %d, %d\n",
X        va->vertexno, vb->vertexno);
X
X    for(i=0; i<nsectors; i++)
X    {
X        if(sectors[i].intersect)
X        {
X            secta = sectors[i].secta;
X            printf("%d: %d %d %d ",
X                    secta,
X                nba[secta].he->prv->vtx->vertexno,
X                nba[secta].he->vtx->vertexno,
X                nba[secta].he->nxt->vtx->vertexno);
X            if(sectors[i].s1a == OUT)
X                printf("(OUT-");
X            if(sectors[i].s1a == ON)
X                printf("(ON-");
X            if(sectors[i].s1a == IN)
X                printf("(IN-");
X            if(sectors[i].s2a == OUT)
X                printf("OUT)");
X            if(sectors[i].s2a == ON)
X                printf("ON)");
X            if(sectors[i].s2a == IN)
X                printf("IN)");
X
X            sectb = sectors[i].sectb;
X            printf(" %d: %d %d %d ",
X                    sectb,
X                nbb[sectb].he->prv->vtx->vertexno,
X                nbb[sectb].he->vtx->vertexno,
X                nbb[sectb].he->nxt->vtx->vertexno);
X            if(sectors[i].s1b == OUT)
X                printf("(OUT-");
X            if(sectors[i].s1b == ON)
X                printf("(ON-");
X            if(sectors[i].s1b == IN)
X                printf("(IN-");
X            if(sectors[i].s2b == OUT)
X                printf("OUT)");
X            if(sectors[i].s2b == ON)
X                printf("ON)");
X            if(sectors[i].s2b == IN)
X                printf("IN)");
X            putchar('\n');
X            fflush(stdout);
X        }
X    }
X}
*EOF
if [ `wc -c <gwb/setop/vtxvtxcl.c` -ne    3102 ]
then
    echo "lengths do not match -- Bad Copy of gwb/setop/vtxvtxcl.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/Makefile"
sed -e 's/^X//' <<\*EOF > gwb/split/Makefile
XLIB =  ../lib/splitlib.a
X
XSRC =  block.c classify.c cleanup.c dist.c getnbrhd.c insertnlledg.c \
X       joincut.c missing.c neighbor.c recledges.c reclsectors.c \
X       sortedges.c split.c splitclassif.c splitconnect.c splitfinish.c \
X       splitgen.c sweep.c
X
X$(LIB):                $(SRC)
X       csh -f Update $(LIB) $?
X
Xsplittest:     splittest.o $(LIB)
X       cc -o splittest -g splittest.o $(LIB) ../lib/gwblib.a -lm
X
Xc.o:;
X       cc -c -g -DTEST $*.c
X
*EOF
if [ `wc -c <gwb/split/Makefile` -ne     404 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/Makefile"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/Update"
sed -e 's/^X//' <<\*EOF > gwb/split/Update
Xset list = ($argv[2-])
X@ n = 0
Xforeach f ($argv[2-])
Xecho cc -c -g $f
Xcc -c -g $f
X@ n++
Xset list[$n] = ${f:r}.o
Xend
Xar r $1 $list[1-]
Xecho ar r $1 $list[1-]
Xranlib $1
Xecho ranlib $1
Xrm $list[1-]
Xecho rm $list[1-]
*EOF
if [ `wc -c <gwb/split/Update` -ne     213 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/Update"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/block.c"
sed -e 's/^X//' <<\*EOF > gwb/split/block.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
XSolid   *block(dx, dy, dz)
Xfloat   dx, dy, dz;
X{
X        Solid        *s;
X
X        s = mvfs(1, 1, 0.0, 0.0, 0.0);
X        mev(s, 1, 1, 2, dx, 0.0, 0.0);
X        mev(s, 1, 2, 3, dx, dy, 0.0);
X        mev(s, 1, 3, 4, 0.0, dy, 0.0);
X        mef(s, 1, 4, 1, 2);
X        sweep(fface(s, 1), 0.0, 0.0, dz);
X        return(s);
X}
*EOF
if [ `wc -c <gwb/split/block.c` -ne     980 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/block.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/classify.c"
sed -e 's/^X//' <<\*EOF > gwb/split/classify.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "split.h"
X
Xvoid    classify(S, Above, Below)
XSolid   *S, *Above, *Below;
X{
X        int             i;
X
X        for(i = 0; i < nfac; i++)
X        {
X                movefac(sonf[i], Above);
X                movefac(sonf[nfac+i], Below);
X        }
X}
X
Xvoid    movefac(f, s)
XFace    *f;
XSolid   *s;
X{
X        Loop            *l;
X        HalfEdge        *he;
X        Face            *f2;
X
X        dellist(FACE, f, f->fsolid);
X        addlist(FACE, f, s);
X        l = f->floops;
X        while(l)
X        {
X                he = l->ledg;
X                do
X                {
X                        f2 = mate(he)->wloop->lface;
X                        if(f2->fsolid != s)
X                                movefac(f2, s);
X                }
X                while((he = he->nxt) != l->ledg);
X                l = l->nextl;
X        }
X}
*EOF
if [ `wc -c <gwb/split/classify.c` -ne    1470 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/classify.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/cleanup.c"
sed -e 's/^X//' <<\*EOF > gwb/split/cleanup.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid    cleanup(s)
XSolid    *s;
X{
X    Face        *f;
X    Loop        *l;
X    HalfEdge    *h;
X
X    s->sedges = (Edge *) NIL;
X    s->sverts = (Vertex *) NIL;
X    f = s->sfaces;
X    while(f)
X    {
X        l = f->floops;
X        while(l)
X        {
X            h = l->ledg;
X            do
X            {
X                if(h->edg != NIL)
X                {
X                    if(h == h->edg->he1)
X                    {
X                        addlist(EDGE, h->edg, s);
X#ifdef TEST
Xprintf("cleanup: add edge %d %d\n", h->vtx->vertexno, mate(h)->vtx->vertexno);
X#endif
X                    }
X                    if(h == h->vtx->vedge)
X                    {
X                        addlist(VERTEX, h->vtx, s);
X#ifdef TEST
Xprintf("cleanup: add vertex %d\n", h->vtx->vertexno);
X#endif
X                    }
X                }
X                else
X                {
X                    addlist(VERTEX, h->vtx, s);
X#ifdef TEST
Xprintf("cleanup: add lone vertex %d\n", h->vtx->vertexno);
X#endif
X                }
X                h = h->nxt;
X            }
X            while(h != l->ledg);
X            l = l->nextl;
X        }
X        f = f->nextf;
X    }
X}
*EOF
if [ `wc -c <gwb/split/cleanup.c` -ne    1797 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/cleanup.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/dist.c"
sed -e 's/^X//' <<\*EOF > gwb/split/dist.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xdouble  dist(v1, v2)
Xvector  v1, v2;
X{
X        return((double)(v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2] + v1[3]*v2[3]));
X}
*EOF
if [ `wc -c <gwb/split/dist.c` -ne     781 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/dist.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/funcs.h"
sed -e 's/^X//' <<\*EOF > gwb/split/funcs.h
X# include    <math.h>
X
X# define    void        int
X/*# define    fabs(x)        (((x) < 0.0) ? (-x) : (x))*/
X
Xvoid        addlist();
XHalfEdge        *addhe();
XSolid        *ball();
XSolid        *block();    /* MAC: clash with mem.h */
XSolid        *circle();
XSolid        *cyl();
XHalfEdge        *delhe();
XFace        *fface();
XHalfEdge        *fhe1();
XHalfEdge        *fhe2();
XFace            *lmef();
XFace            *lmfkrh();
Xvoid            lmev();
Xint         mev();
XSolid       *mvfs();
XNode        *new();
XSolid        *torus();
X
Xdouble        dot();
Xdouble        normalize();
Xdouble        dist();
*EOF
if [ `wc -c <gwb/split/funcs.h` -ne     608 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/funcs.h"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/getnbrhd.c"
sed -e 's/^X//' <<\*EOF > gwb/split/getnbrhd.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "split.h"
X
Xvoid    getneighborhood(vtx, SP)
XVertex  *vtx;
Xvector  SP;
X{
X        HalfEdge        *he;
X        vector          bisect;
X        double          d;
X
X        nnbr = 0;
X        he = vtx->vedge;
X        do
X        {
X                 nbr[nnbr].sector = he;
X                 d = dist(he->nxt->vtx->vcoord, SP);
X                 nbr[nnbr++].cl = comp(d, 0.0, EPS);
X                 if(iswide(he))
X                 {
X                     bisector(he, bisect);
X                     nbr[nnbr].sector = he;
X                     d = dist(bisect, SP);
X                    /*
X                     nbr[nnbr++].cl = comp(d, 0.0, EPS);
X                    */
X                    nbr[nnbr].cl = nbr[nnbr-1].cl;
X                    nbr[nnbr-1].cl = comp(d, 0.0, EPS);
X                     nnbr++;
X                 }
X        }
X        while((he = mate(he)->nxt) != vtx->vedge);
X}
*EOF
if [ `wc -c <gwb/split/getnbrhd.c` -ne    1471 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/getnbrhd.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/gwb.h"
sed -e 's/^X//' <<\*EOF > gwb/split/gwb.h
X# include <stdio.h>
X# define VAX 1
X
Xtypedef float                   vector[4];
Xtypedef float                   matrix[4][4];
X#ifdef VAX
Xtypedef short                   Id;
X#endif
X#ifdef MAC
Xtypedef int                     Id;
X#endif
Xtypedef struct solid            Solid;
Xtypedef struct face             Face;
Xtypedef struct loop             Loop;
Xtypedef struct halfedge         HalfEdge;
Xtypedef struct vertex           Vertex;
Xtypedef struct edge             Edge;
Xtypedef union nodes             Node;
X
Xstruct solid
X{
X        Face            *sfaces;        /* pointer to list of faces */
X        Edge            *sedges;        /* pointer to list of edges */
X        Vertex          *sverts;        /* pointer to list of vertices */
X};
Xstruct face
X{
X        Id              faceno;         /* face identifier */
X        Solid           *fsolid;        /* back pointer to solid */
X        Loop            *flout;         /* pointer to outer loop */
X        Loop            *floops;        /* pointer to list of loops */
X        vector          feq;            /* face equation */
X        Face            *nextf;         /* pointer to next face */
X        Face            *prevf;         /* pointer to previous face */
X};
Xstruct loop
X{
X        HalfEdge        *ledg;          /* pointer to ring of halfedges */
X        Face            *lface;         /* back pointer to face */
X        Loop            *nextl;         /* pointer to next loop */
X        Loop            *prevl;         /* pointer to previous loop */
X};
Xstruct edge
X{
X        HalfEdge        *he1;           /* pointer to right halfedge */
X        HalfEdge        *he2;           /* pointer to left halfedge */
X        Edge            *nexte;         /* pointer to next edge */
X        Edge            *preve;         /* pointer to previous edge */
X};
Xstruct halfedge
X{
X        Edge            *edg;           /* pointer to parent edge */
X        Vertex          *vtx;           /* pointer to starting vertex */
X        Loop            *wloop;         /* back pointer to loop */
X        HalfEdge        *nxt;           /* pointer to next halfedge */
X        HalfEdge        *prv;           /* pointer to previous halfedge */
X};
Xstruct vertex
X{
X        Id              vertexno;       /* vertex identifier */
X        HalfEdge        *vedge;         /* pointer to an adjacent halfedge */
X        vector          vcoord;         /* vertex coordinates */
X        Vertex          *nextv;         /* pointer to next vertex */
X        Vertex          *prevv;         /* pointer to previous vertex */
X};
Xunion nodes
X{
X        Solid           s;
X        Face            f;
X        Loop            l;
X        HalfEdge        h;
X        Vertex          v;
X        Edge            e;
X};
X
X# include "params.h"
*EOF
if [ `wc -c <gwb/split/gwb.h` -ne    2765 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/gwb.h"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/insertnlledg.c"
sed -e 's/^X//' <<\*EOF > gwb/split/insertnlledg.c
X#
X# define TEST 1
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X#include "split.h"
X
Xvoid    insertnulledges()
X{
X        int             start, i;
X        HalfEdge        *head, *tail;
X
X        i = 0;
X        while(!(nbr[i].cl == BELOW && nbr[(i+1)%nnbr].cl == ABOVE))
X                if(++i == nnbr) return;
X        start = i;
X        head = nbr[(i+1)%nnbr].sector;
X        while(1)
X        {
X                while(!(nbr[i].cl == ABOVE && nbr[(i+1)%nnbr].cl == BELOW))
X                        i = (i+1) % nnbr;
X                tail = nbr[(i+1)%nnbr].sector;
X#ifdef TEST
Xprintf("insertnulledges: insert from (%d %d) to (%d %d)\n",
Xhead->vtx->vertexno, head->nxt->vtx->vertexno,
Xtail->vtx->vertexno, tail->nxt->vtx->vertexno);
X#endif
X                lmev(head, tail, ++maxv,
X                        head->vtx->vcoord[0],
X                        head->vtx->vcoord[1],
X                        head->vtx->vcoord[2]);
X                sone[nedg++] = head->prv->edg;
X                while(!(nbr[i].cl == BELOW && nbr[(i+1)%nnbr].cl == ABOVE))
X                {
X                        i = (i+1) % nnbr;
X                        if(i == start) return;
X                }
X               head = nbr[(i+1)%nnbr].sector;
X        }
X}
*EOF
if [ `wc -c <gwb/split/insertnlledg.c` -ne    1797 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/insertnlledg.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/joincut.c"
sed -e 's/^X//' <<\*EOF > gwb/split/joincut.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "split.h"
X# define TEST 1
X
Xvoid           join(h1, h2)
XHalfEdge       *h1, *h2;
X{
X        Face    *oldf, *newf;
X
X#ifdef TEST
Xprintf("join edges (%d-%d) (%d-%d)\n",
Xh1->vtx->vertexno,
Xh1->nxt->vtx->vertexno,
Xh2->vtx->vertexno,
Xh2->nxt->vtx->vertexno);
X#ifdef TESTLONG
Xfacels(h1->wloop->lface, 1);
X#endif
X#endif
X
X    oldf = h1->wloop->lface;
X    newf = (Face *) NIL;
X    if(h1->wloop == h2->wloop)
X        {
X                if(h1->prv->prv != h2)
X            newf = lmef(h1, h2->nxt, ++maxf);
X        }
X        else
X        {
X                lmekr(h1, h2->nxt);
X        }
X        if(h1->nxt->nxt != h2)
X    {
X            lmef(h2, h1->nxt, ++maxf);
X        if(newf && oldf->floops->nextl)
X            laringmv(oldf, newf);
X    }
X}
X
Xvoid            cut(he)
XHalfEdge        *he;
X{
X        if(he->edg->he1->wloop == he->edg->he2->wloop)
X        {
X                sonf[nfac++] = he->wloop->lface;
X                lkemr(he->edg->he1, he->edg->he2);
X        }
X        else    lkef(he->edg->he1, he->edg->he2);
X}
*EOF
if [ `wc -c <gwb/split/joincut.c` -ne    1653 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/joincut.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/missing.c"
sed -e 's/^X//' <<\*EOF > gwb/split/missing.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
Xint     iswide()
X{
X        return(1);
X}
X
Xvoid    bisector() {}
*EOF
if [ `wc -c <gwb/split/missing.c` -ne     703 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/missing.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/neighbor.c"
sed -e 's/^X//' <<\*EOF > gwb/split/neighbor.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "split.h"
X
Xint             neighbor(h1, h2)
XHalfEdge        *h1, *h2;
X{
X    return(h1->wloop->lface == h2->wloop->lface &&
X      ((h1 == h1->edg->he1 && h2 == h2->edg->he2) ||
X       (h1 == h1->edg->he2 && h2 == h2->edg->he1)));
X}
*EOF
if [ `wc -c <gwb/split/neighbor.c` -ne     881 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/neighbor.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/params.h"
sed -e 's/^X//' <<\*EOF > gwb/split/params.h
X/* return codes and misc constants */
X# define        ERROR           -1
X# define        SUCCESS         -2
X# define        NIL             0
X# define        PI              3.141592653589793
X
X/* parameters for memory allocation routines */
X# define        SOLID           0
X# define        FACE            1
X# define        LOOP            2
X# define        HALFEDGE        3
X# define        EDGE            4
X# define        VERTEX          5
X
X/* coordinate plane names */
X# define        X               0
X# define        Y               1
X# define        Z               2
X
X/* orientations */
X# define        PLUS            0
X# define        MINUS           1
X
X/* macros */
X# define        mate(he)        (((he) == (he)->edg->he1) ? \
X                                (he)->edg->he2 : (he)->edg->he1)
X# define        max(x,y)        (((x) > (y)) ? (x) : (y))
X# define        abs(x)          (((x) > 0.0) ? (x) : -(x))
X
X/* global variables */
Xextern Id       maxf;           /* largest face no. given so far */
Xextern Id       maxv;           /* largest vertex no. given so far */
X
X/* epsilons for geometric tests */
Xextern double   EPS;
Xextern double   BIGEPS;
X
X# include "funcs.h"
*EOF
if [ `wc -c <gwb/split/params.h` -ne    1187 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/params.h"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/recledges.c"
sed -e 's/^X//' <<\*EOF > gwb/split/recledges.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "split.h"
X
Xvoid    reclassifyonedges()
X{
X        int             i;
X
X        for(i=0; i<nnbr; i++)
X        {
X                if(nbr[i].cl == ON)
X                {
X                        if(nbr[(nnbr+i-1)%nnbr].cl == BELOW)
X                        {
X                                if(nbr[(i+1)%nnbr].cl == BELOW)
X                                        nbr[i].cl = ABOVE;
X                                else    nbr[i].cl = BELOW;
X                        }
X                        else    nbr[i].cl = BELOW;
X                }
X        }
X}
*EOF
if [ `wc -c <gwb/split/recledges.c` -ne    1189 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/recledges.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/reclsectors.c"
sed -e 's/^X//' <<\*EOF > gwb/split/reclsectors.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "split.h"
X
Xvoid    reclassifyonsectors(SP)
Xvector  SP;
X{
X        Face            *f;
X        vector          c;
X        double          d;
X        int             i;
X
X        for(i=0; i<nnbr; i++)
X        {
X                f = nbr[i].sector->wloop->lface;
X                cross(c, f->feq, SP);
X                d = dot(c, c);
X                if(comp(d, 0.0, EPS*EPS) == 0)
X                {
X                        d = dot(f->feq, SP);
X                        if(comp(d, 0.0, EPS) == 1)
X                        {
X                               nbr[i].cl = BELOW;
X                               nbr[(i+nnbr-1)%nnbr].cl = BELOW;
X                        }
X                        else
X                        {
X                               nbr[i].cl = ABOVE;
X                               nbr[(i+nnbr-1)%nnbr].cl = ABOVE;
X                        }
X                }
X        }
X}
*EOF
if [ `wc -c <gwb/split/reclsectors.c` -ne    1527 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/reclsectors.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/sortedges.c"
sed -e 's/^X//' <<\*EOF > gwb/split/sortedges.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "split.h"
X
Xvoid    sortnulledges()
X{
X    register int        i, j;
X
X    if(nedg < 5) return;
X    for(i=0; i<nedg; i++)
X            for(j=i+1; j<nedg; j++)
X                  if(greater(i, j)) swap(i, j);
X}
Xint    greater(i, j)
Xint    i, j;
X{
X    register Vertex        *v1, *v2;
X    register int        com;
X
X    v1 = sone[i]->he1->vtx;
X    v2 = sone[j]->he1->vtx;
X    if((com = comp(v1->vcoord[0], v2->vcoord[0], BIGEPS)) == -1) return(0);
X    else if(com == 0)
X    {
X        if((com = comp(v1->vcoord[1], v2->vcoord[1], BIGEPS)) == -1)
X            return(0);
X        else if(com == 0)
X        {
X            if((com = comp(v1->vcoord[2], v2->vcoord[2], BIGEPS))
X                == -1) return(0);
X        }
X    }
X    return(1);
X}
Xint    swap(i, j)
Xint    i, j;
X{
X    register Edge *temp;
X
X    temp = sone[i];
X    sone[i] = sone[j];
X    sone[j] = temp;
X}
X
XEdge    *getnextnulledge()
X{
X        Edge *e;
X    static int n = 0;
X
X    if(n == nedg)
X    {
X           n = 0;
X           return((Edge *) NIL);
X    }
X    e = sone[n++];
X    return(e);
X}
*EOF
if [ `wc -c <gwb/split/sortedges.c` -ne    1690 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/sortedges.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/split.c"
sed -e 's/^X//' <<\*EOF > gwb/split/split.c
X#
X# define TEST 1
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "split.h"
X
Xvoid    split(S, SP, Above, Below)
XSolid   *S, **Above, **Below;
Xvector  SP;
X{
X        Face    *f;
X
X        for(f = S->sfaces; f != NIL; f = f->nextf)
X                faceeq(f->flout, f->feq);
X        getmaxnames(S);
X
X#ifdef TEST
Xprintf("split: equation = ");
Xvecprint(SP);
X#endif
X        splitgenerate(S, SP);
X#ifdef TEST
Xprintf("split: %d on-vertices found\n", nvtx);
Xsolidls(S, 1);
X#endif
X        splitclassify(SP);
X#ifdef TEST
Xprintf("split: %d null edges generated\n", nedg);
Xprintf("split: set of null edges:\n");
X{
X  int i;
X  for(i=0; i<nedg; i++)
X    printf("%d %d\n", sone[i]->he1->vtx->vertexno,
X       sone[i]->he2->vtx->vertexno);
X}
Xsolidls(S, 1);
X#endif
X        if(nedg == 0)
X        {
X                printf("split: no intersections found\n");
X                return;
X        }
X        splitconnect();
X#ifdef TEST
Xprintf("split: %d null faces generated\n", nfac);
Xprintf("split: set of null faces:\n");
X{
X  int i;
X  for(i=0; i<nfac; i++)
X    facels(sonf[i]);
X}
Xsolidls(S, 1);
X#endif
X        splitfinish(S, Above, Below);
X}
*EOF
if [ `wc -c <gwb/split/split.c` -ne    1714 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/split.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/split.h"
sed -e 's/^X//' <<\*EOF > gwb/split/split.h
X# include "gwb.h"
X
X# define ABOVE 1
X# define BELOW -1
X# define ON 0
X
X# define MAXONVERTICES 100
X# define MAXNULLEDGES 200
X# define MAXNULLFACES 50
X# define MAXEDGESFORVERTEX 20
X
XVertex  *soov[MAXONVERTICES];     /* naille paremmat nimet */
Xint     nvtx;
XEdge    *sone[MAXNULLEDGES];
Xint     nedg;
XFace    *sonf[MAXNULLFACES*2];
Xint     nfac;
X
Xstruct
X{
X        HalfEdge        *sector;
X        int             cl;
X}       nbr[MAXEDGESFORVERTEX];
Xint     nnbr;
*EOF
if [ `wc -c <gwb/split/split.h` -ne     459 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/split.h"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/splitclassif.c"
sed -e 's/^X//' <<\*EOF > gwb/split/splitclassif.c
X#
X# define TEST 1
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "split.h"
X
Xvoid    splitclassify(SP)
Xvector  SP;
X{
X        int     i;
X
X        nedg = 0;
X        for(i=0; i<nvtx; i++)
X        {
X#ifdef TEST
Xprintf("splitclassify: classify vertex %d\n", soov[i]->vertexno);
X#endif
X                getneighborhood(soov[i], SP);
X#ifdef TEST
Xprintneighborhood();
X#endif
X                reclassifyonsectors(SP);
X#ifdef TEST
Xprintneighborhood();
X#endif
X                reclassifyonedges();
X#ifdef TEST
Xprintneighborhood();
X#endif
X                insertnulledges();
X        }
X}
X
X#ifdef TEST
Xprintneighborhood()
X{
X        int i;
X
X        printf("neighborhood:\n");
X    for(i=0; i<nnbr; i++)
X    {
X            printf("  neighbor vtx %d, class = ",
X               nbr[i].sector->nxt->vtx->vertexno);
X        if(nbr[i].cl == BELOW) printf("BELOW\n");
X        if(nbr[i].cl == ON) printf("ON\n");
X        if(nbr[i].cl == ABOVE) printf("ABOVE\n");
X        }
X}
X#endif
X
*EOF
if [ `wc -c <gwb/split/splitclassif.c` -ne    1554 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/splitclassif.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/splitconnect.c"
sed -e 's/^X//' <<\*EOF > gwb/split/splitconnect.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "split.h"
X
Xvoid    splitconnect()
X{
X        Edge            *nextedge, *getnextnulledge();
X    HalfEdge        *h1, *h2, *canjoin();
X
X        nfac = 0;
X        sortnulledges();
X        while(nextedge = getnextnulledge())
X        {
X        if(h1 = canjoin(nextedge->he1))
X        {
X            join(h1, nextedge->he1);
X            if(!isloose(mate(h1)))
X                cut(h1);
X        }
X        if(h2 = canjoin(nextedge->he2))
X        {
X            join(h2, nextedge->he2);
X            if(!isloose(mate(h2)))
X                cut(h2);
X        }
X        if(h1 && h2)
X        {
X            cut(nextedge->he1);
X        }
X        }
X}
X
Xstatic HalfEdge *ends[30];
Xstatic int      nend;
X
XHalfEdge        *canjoin(he)
XHalfEdge    *he;
X{
X    HalfEdge    *ret;
X        int             i, j;
X
X    for(i = 0; i<nend; i++)
X            if(neighbor(he, ends[i]))
X        {
X            ret = ends[i];
X            for(j=i+1; j<nend; j++)
X                ends[j-1] = ends[j];
X            nend--;
X            return(ret);
X        }
X        ends[nend++] = he;
X    return((HalfEdge *) NIL);
X}
X
Xint             isloose(he)
XHalfEdge        *he;
X{
X        register int    i;
X
X    for(i=0; i<nend; i++)
X           if(ends[i] == he)
X               return(1);
X    return(0);
X}
*EOF
if [ `wc -c <gwb/split/splitconnect.c` -ne    1900 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/splitconnect.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/splitfinish.c"
sed -e 's/^X//' <<\*EOF > gwb/split/splitfinish.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "split.h"
X
Xvoid    splitfinish(S, Above, Below)
XSolid   *S, **Above, **Below;
X{
X        int        i;
X
X        for(i=0; i<nfac; i++)
X                sonf[nfac+i] =
X                 lmfkrh(sonf[i]->floops->nextl, ++maxf);
X        *Above = (Solid *) new(NIL, SOLID);
X        *Below = (Solid *) new(NIL, SOLID);
X        classify(S, *Above, *Below);
X        cleanup(*Above);
X        cleanup(*Below);
X}
*EOF
if [ `wc -c <gwb/split/splitfinish.c` -ne    1048 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/splitfinish.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/splitgen.c"
sed -e 's/^X//' <<\*EOF > gwb/split/splitgen.c
X#
X# define TEST 1
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "split.h"
X
Xvoid     splitgenerate(S, SP)
XSolid    *S;
Xvector   SP;
X{
X     Edge          *e;
X     HalfEdge      *he;
X     Vertex        *v1, *v2;
X     double        d1, d2, t, x, y, z;
X     int           s1, s2;
X
X     nvtx = 0;
X     for(e = S->sedges; e != NIL; e = e->nexte)
X     {
X          v1 = e->he1->vtx;
X          v2 = e->he2->vtx;
X          d1 = dist(v1->vcoord, SP);
X          d2 = dist(v2->vcoord, SP);
X          s1 = comp(d1, 0.0, EPS);
X          s2 = comp(d2, 0.0, EPS);
X          if(s1 == -1 && s2 == 1 || s1 == 1 && s2 == -1)
X          {
X               t = d1 / (d1 - d2);
X               x = v1->vcoord[0] + t*(v2->vcoord[0]-v1->vcoord[0]);
X               y = v1->vcoord[1] + t*(v2->vcoord[1]-v1->vcoord[1]);
X               z = v1->vcoord[2] + t*(v2->vcoord[2]-v1->vcoord[2]);
X#ifdef TEST
Xprintf("splitgenerate: subdivide edge %d %d\n", v1->vertexno, v2->vertexno);
X#endif
X               lmev(e->he1, (he = e->he2->nxt), ++maxv, x, y, z);
X               addsoov(he->prv->vtx);
X          }
X          else
X          {
X               if(s1 == 0) addsoov(v1);
X               if(s2 == 0) addsoov(v2);
X          }
X     }
X}
X
Xvoid      addsoov(v)
XVertex    *v;
X{
X     int       i;
X
X     for(i=0; i<nvtx; i++)
X          if(soov[i] == v) return;
X     soov[nvtx++] = v;
X#ifdef TEST
Xprintf("splitgenerate: relevent vertex  %d: %d\n", nvtx, v->vertexno);
X#endif
X}
*EOF
if [ `wc -c <gwb/split/splitgen.c` -ne    2030 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/splitgen.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/splittest.c"
sed -e 's/^X//' <<\*EOF > gwb/split/splittest.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xmain()
X{
X    Solid *s, *above, *below;
X    vector sp;
X
X    s = mvfs(1, 1, 20.0, 0.0, 0.0);
X    mev(s, 1, 1, 2, 20.0, 10.0, 0.0);
X    mev(s, 1, 2, 3, 10.0, 10.0, 0.0);
X    mev(s, 1, 3, 4, 10.0, 20.0, 0.0);
X    mev(s, 1, 4, 5, 0.0, 20.0, 0.0);
X    mev(s, 1, 5, 6, 0.0, 0.0, 0.0);
X    mef(s, 6, 1, 1, 2);
X    sweep(fface(s, 1), 0.0, 0.0, 40.0);
X    sp[0] = 0.0;
X    sp[1] = 1.0;
X    sp[2] = 0.0;
X    sp[3] = -10.0;
X    solidls(s, 2);
X    split(s, sp, &above, &below);
X    solidls(above, 1);
X    solidls(below, 1);
X}
*EOF
if [ `wc -c <gwb/split/splittest.c` -ne    1172 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/splittest.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/sweep.c"
sed -e 's/^X//' <<\*EOF > gwb/split/sweep.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xvoid    sweep(fac, dx, dy, dz)
XFace    *fac;
Xfloat   dx, dy, dz;
X{
X        Loop            *l;
X        HalfEdge        *first, *scan;
X        Vertex          *v;
X
X        getmaxnames(fac->fsolid);
X        l = fac->floops;
X        while(l)
X        {
X                first = l->ledg;
X                scan = first->nxt;
X                v = scan->vtx;
X                lmev(scan, scan, ++maxv,
X                        v->vcoord[0] + dx,
X                        v->vcoord[1] + dy,
X                        v->vcoord[2] + dz);
X                while(scan != first)
X                {
X                        v = scan->nxt->vtx;
X                        lmev(scan->nxt, scan->nxt, ++maxv,
X                                v->vcoord[0] + dx,
X                                v->vcoord[1] + dy,
X                                v->vcoord[2] + dz);
X                        lmef(scan->prv, scan->nxt->nxt, ++maxf);
X                        scan = mate(scan->nxt)->nxt;
X                }
X                lmef(scan->prv, scan->nxt->nxt, ++maxf);
X                l = l->nextl;
X        }
X}
*EOF
if [ `wc -c <gwb/split/sweep.c` -ne    1725 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/sweep.c"
fi
if [ ! -d ./gwb ]
then
echo "Making directory ./gwb"
mkdir ./gwb
fi
if [ ! -d ./gwb/split ]
then
echo "Making directory ./gwb/split"
mkdir ./gwb/split
fi
echo "extracting file gwb/split/test1.c"
sed -e 's/^X//' <<\*EOF > gwb/split/test1.c
X#
X
X/*
X**    Geometric WorkBench
X**
X**    Copyright (c) 1988
X**    Martti Mantyla, Helsinki University of Technology
X**
X**    This software is NOT released to public domain, but a
X**    permission is granted to inspect the code and use it, or
X**    portions of it for research or educational purposes, provided
X**    that this notice is not removed or modified.  Commercial
X**    exploitation is disallowed.
X**
X**    THE SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTY OF ANY KIND.
X**    THE AUTHOR SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED
X**    WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE AND ANY WARRANTY
X**    OF MERCHANTABILITY.
X*/
X
X# include "gwb.h"
X
Xmain()
X{
X    Solid *s, *above, *below;
X    vector sp;
X
X    s = block(10.0, 15.0, 20.0);
X    sweep(fface(s, 1), 0.0, 0.0, 20.0);
X    sp[0] = 0.0;
X    sp[1] = 0.0;
X    sp[2] = 1.0;
X    sp[3] = -20.0;
X    solidls(s, 2);
X    split(s, sp, &above, &below);
X    solidls(above, 1);
X    solidls(below, 1);
X}
*EOF
if [ `wc -c <gwb/split/test1.c` -ne     958 ]
then
    echo "lengths do not match -- Bad Copy of gwb/split/test1.c"
fi
echo "Done."
